# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DetailedScanOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scan_occurrence_id': 'str',
        'org': 'str',
        'analysis_id': 'str',
        'analysis_name': 'str',
        'analysis_occurrence_id': 'str',
        'count_of_failed_verifications': 'int',
        'count_of_high_sev_flaws': 'int',
        'count_of_low_sev_flaws': 'int',
        'count_of_medium_sev_flaws': 'int',
        'count_of_very_high_sev_flaws': 'int',
        'duration': 'str',
        'expected_publish_date': 'str',
        'has_custom_configuration': 'bool',
        'internal_scan_configuration': 'InternalScanConfiguration',
        'extended_status': 'str',
        'linked_platform_app_name': 'str',
        'linked_platform_app_uuid': 'str',
        'linked_platform_app_id': 'int',
        'linked_app_info': 'LinkedAppInfo',
        'result_import_status': 'str',
        'scan_contact_info': 'ContactInformation',
        'scan_id': 'str',
        'scan_locked': 'bool',
        'scan_locked_on': 'str',
        'scheduled_start_date': 'str',
        'scheduled_end_date': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'status': 'ScanOccurrenceStatus',
        'summary': 'ScanOccurrenceRuntimeSummary',
        'target_url': 'str',
        'total_flaw_count': 'int',
        'verification_only': 'bool',
        'verifications': 'list[ScanVerification]',
        'created_on': 'str',
        'last_modified_on': 'str',
        'app_link_type': 'str',
        'links': 'list[Link]',
        'capabilities': 'list[str]'
    }

    attribute_map = {
        'scan_occurrence_id': 'scan_occurrence_id',
        'org': 'org',
        'analysis_id': 'analysis_id',
        'analysis_name': 'analysis_name',
        'analysis_occurrence_id': 'analysis_occurrence_id',
        'count_of_failed_verifications': 'count_of_failed_verifications',
        'count_of_high_sev_flaws': 'count_of_high_sev_flaws',
        'count_of_low_sev_flaws': 'count_of_low_sev_flaws',
        'count_of_medium_sev_flaws': 'count_of_medium_sev_flaws',
        'count_of_very_high_sev_flaws': 'count_of_very_high_sev_flaws',
        'duration': 'duration',
        'expected_publish_date': 'expected_publish_date',
        'has_custom_configuration': 'has_custom_configuration',
        'internal_scan_configuration': 'internal_scan_configuration',
        'extended_status': 'extended_status',
        'linked_platform_app_name': 'linked_platform_app_name',
        'linked_platform_app_uuid': 'linked_platform_app_uuid',
        'linked_platform_app_id': 'linked_platform_app_id',
        'linked_app_info': 'linked_app_info',
        'result_import_status': 'result_import_status',
        'scan_contact_info': 'scan_contact_info',
        'scan_id': 'scan_id',
        'scan_locked': 'scan_locked',
        'scan_locked_on': 'scan_locked_on',
        'scheduled_start_date': 'scheduled_start_date',
        'scheduled_end_date': 'scheduled_end_date',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'status': 'status',
        'summary': 'summary',
        'target_url': 'target_url',
        'total_flaw_count': 'total_flaw_count',
        'verification_only': 'verification_only',
        'verifications': 'verifications',
        'created_on': 'created_on',
        'last_modified_on': 'last_modified_on',
        'app_link_type': 'app_link_type',
        'links': '_links',
        'capabilities': 'capabilities'
    }

    def __init__(self, scan_occurrence_id=None, org=None, analysis_id=None, analysis_name=None, analysis_occurrence_id=None, count_of_failed_verifications=None, count_of_high_sev_flaws=None, count_of_low_sev_flaws=None, count_of_medium_sev_flaws=None, count_of_very_high_sev_flaws=None, duration=None, expected_publish_date=None, has_custom_configuration=None, internal_scan_configuration=None, extended_status=None, linked_platform_app_name=None, linked_platform_app_uuid=None, linked_platform_app_id=None, linked_app_info=None, result_import_status=None, scan_contact_info=None, scan_id=None, scan_locked=None, scan_locked_on=None, scheduled_start_date=None, scheduled_end_date=None, start_date=None, end_date=None, status=None, summary=None, target_url=None, total_flaw_count=None, verification_only=None, verifications=None, created_on=None, last_modified_on=None, app_link_type=None, links=None, capabilities=None):  # noqa: E501
        """DetailedScanOccurrence - a model defined in Swagger"""  # noqa: E501

        self._scan_occurrence_id = None
        self._org = None
        self._analysis_id = None
        self._analysis_name = None
        self._analysis_occurrence_id = None
        self._count_of_failed_verifications = None
        self._count_of_high_sev_flaws = None
        self._count_of_low_sev_flaws = None
        self._count_of_medium_sev_flaws = None
        self._count_of_very_high_sev_flaws = None
        self._duration = None
        self._expected_publish_date = None
        self._has_custom_configuration = None
        self._internal_scan_configuration = None
        self._extended_status = None
        self._linked_platform_app_name = None
        self._linked_platform_app_uuid = None
        self._linked_platform_app_id = None
        self._linked_app_info = None
        self._result_import_status = None
        self._scan_contact_info = None
        self._scan_id = None
        self._scan_locked = None
        self._scan_locked_on = None
        self._scheduled_start_date = None
        self._scheduled_end_date = None
        self._start_date = None
        self._end_date = None
        self._status = None
        self._summary = None
        self._target_url = None
        self._total_flaw_count = None
        self._verification_only = None
        self._verifications = None
        self._created_on = None
        self._last_modified_on = None
        self._app_link_type = None
        self._links = None
        self._capabilities = None
        self.discriminator = None

        if scan_occurrence_id is not None:
            self.scan_occurrence_id = scan_occurrence_id
        if org is not None:
            self.org = org
        if analysis_id is not None:
            self.analysis_id = analysis_id
        if analysis_name is not None:
            self.analysis_name = analysis_name
        if analysis_occurrence_id is not None:
            self.analysis_occurrence_id = analysis_occurrence_id
        if count_of_failed_verifications is not None:
            self.count_of_failed_verifications = count_of_failed_verifications
        if count_of_high_sev_flaws is not None:
            self.count_of_high_sev_flaws = count_of_high_sev_flaws
        if count_of_low_sev_flaws is not None:
            self.count_of_low_sev_flaws = count_of_low_sev_flaws
        if count_of_medium_sev_flaws is not None:
            self.count_of_medium_sev_flaws = count_of_medium_sev_flaws
        if count_of_very_high_sev_flaws is not None:
            self.count_of_very_high_sev_flaws = count_of_very_high_sev_flaws
        if duration is not None:
            self.duration = duration
        if expected_publish_date is not None:
            self.expected_publish_date = expected_publish_date
        if has_custom_configuration is not None:
            self.has_custom_configuration = has_custom_configuration
        if internal_scan_configuration is not None:
            self.internal_scan_configuration = internal_scan_configuration
        if extended_status is not None:
            self.extended_status = extended_status
        if linked_platform_app_name is not None:
            self.linked_platform_app_name = linked_platform_app_name
        if linked_platform_app_uuid is not None:
            self.linked_platform_app_uuid = linked_platform_app_uuid
        if linked_platform_app_id is not None:
            self.linked_platform_app_id = linked_platform_app_id
        if linked_app_info is not None:
            self.linked_app_info = linked_app_info
        if result_import_status is not None:
            self.result_import_status = result_import_status
        if scan_contact_info is not None:
            self.scan_contact_info = scan_contact_info
        if scan_id is not None:
            self.scan_id = scan_id
        if scan_locked is not None:
            self.scan_locked = scan_locked
        if scan_locked_on is not None:
            self.scan_locked_on = scan_locked_on
        if scheduled_start_date is not None:
            self.scheduled_start_date = scheduled_start_date
        if scheduled_end_date is not None:
            self.scheduled_end_date = scheduled_end_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if status is not None:
            self.status = status
        if summary is not None:
            self.summary = summary
        if target_url is not None:
            self.target_url = target_url
        if total_flaw_count is not None:
            self.total_flaw_count = total_flaw_count
        if verification_only is not None:
            self.verification_only = verification_only
        if verifications is not None:
            self.verifications = verifications
        if created_on is not None:
            self.created_on = created_on
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if app_link_type is not None:
            self.app_link_type = app_link_type
        if links is not None:
            self.links = links
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def scan_occurrence_id(self):
        """Gets the scan_occurrence_id of this DetailedScanOccurrence.  # noqa: E501

        Unique identifier and locator of the URL scan occurrence.  # noqa: E501

        :return: The scan_occurrence_id of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._scan_occurrence_id

    @scan_occurrence_id.setter
    def scan_occurrence_id(self, scan_occurrence_id):
        """Sets the scan_occurrence_id of this DetailedScanOccurrence.

        Unique identifier and locator of the URL scan occurrence.  # noqa: E501

        :param scan_occurrence_id: The scan_occurrence_id of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._scan_occurrence_id = scan_occurrence_id

    @property
    def org(self):
        """Gets the org of this DetailedScanOccurrence.  # noqa: E501

        Unique identifier of the organization.  # noqa: E501

        :return: The org of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this DetailedScanOccurrence.

        Unique identifier of the organization.  # noqa: E501

        :param org: The org of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def analysis_id(self):
        """Gets the analysis_id of this DetailedScanOccurrence.  # noqa: E501

        Identifier of the Dynamic Analysis containing the URL scan of which the current scan occurrence is an instance.  # noqa: E501

        :return: The analysis_id of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this DetailedScanOccurrence.

        Identifier of the Dynamic Analysis containing the URL scan of which the current scan occurrence is an instance.  # noqa: E501

        :param analysis_id: The analysis_id of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    @property
    def analysis_name(self):
        """Gets the analysis_name of this DetailedScanOccurrence.  # noqa: E501

        Name of the related Dynamic Analysis.  # noqa: E501

        :return: The analysis_name of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._analysis_name

    @analysis_name.setter
    def analysis_name(self, analysis_name):
        """Sets the analysis_name of this DetailedScanOccurrence.

        Name of the related Dynamic Analysis.  # noqa: E501

        :param analysis_name: The analysis_name of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._analysis_name = analysis_name

    @property
    def analysis_occurrence_id(self):
        """Gets the analysis_occurrence_id of this DetailedScanOccurrence.  # noqa: E501

        Identifer of the Dynamic Analysis occurrence of which this URL scan occurrence is part.  # noqa: E501

        :return: The analysis_occurrence_id of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._analysis_occurrence_id

    @analysis_occurrence_id.setter
    def analysis_occurrence_id(self, analysis_occurrence_id):
        """Sets the analysis_occurrence_id of this DetailedScanOccurrence.

        Identifer of the Dynamic Analysis occurrence of which this URL scan occurrence is part.  # noqa: E501

        :param analysis_occurrence_id: The analysis_occurrence_id of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._analysis_occurrence_id = analysis_occurrence_id

    @property
    def count_of_failed_verifications(self):
        """Gets the count_of_failed_verifications of this DetailedScanOccurrence.  # noqa: E501

        Count of failed verifications.  # noqa: E501

        :return: The count_of_failed_verifications of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_failed_verifications

    @count_of_failed_verifications.setter
    def count_of_failed_verifications(self, count_of_failed_verifications):
        """Sets the count_of_failed_verifications of this DetailedScanOccurrence.

        Count of failed verifications.  # noqa: E501

        :param count_of_failed_verifications: The count_of_failed_verifications of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_failed_verifications = count_of_failed_verifications

    @property
    def count_of_high_sev_flaws(self):
        """Gets the count_of_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501

        Count of high-severity flaws found in the URL scan.  # noqa: E501

        :return: The count_of_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_high_sev_flaws

    @count_of_high_sev_flaws.setter
    def count_of_high_sev_flaws(self, count_of_high_sev_flaws):
        """Sets the count_of_high_sev_flaws of this DetailedScanOccurrence.

        Count of high-severity flaws found in the URL scan.  # noqa: E501

        :param count_of_high_sev_flaws: The count_of_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_high_sev_flaws = count_of_high_sev_flaws

    @property
    def count_of_low_sev_flaws(self):
        """Gets the count_of_low_sev_flaws of this DetailedScanOccurrence.  # noqa: E501

        Count of low-severity flaws found in the URL scan.  # noqa: E501

        :return: The count_of_low_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_low_sev_flaws

    @count_of_low_sev_flaws.setter
    def count_of_low_sev_flaws(self, count_of_low_sev_flaws):
        """Sets the count_of_low_sev_flaws of this DetailedScanOccurrence.

        Count of low-severity flaws found in the URL scan.  # noqa: E501

        :param count_of_low_sev_flaws: The count_of_low_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_low_sev_flaws = count_of_low_sev_flaws

    @property
    def count_of_medium_sev_flaws(self):
        """Gets the count_of_medium_sev_flaws of this DetailedScanOccurrence.  # noqa: E501

        Count of medium-severity flaws found in the scan.  # noqa: E501

        :return: The count_of_medium_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_medium_sev_flaws

    @count_of_medium_sev_flaws.setter
    def count_of_medium_sev_flaws(self, count_of_medium_sev_flaws):
        """Sets the count_of_medium_sev_flaws of this DetailedScanOccurrence.

        Count of medium-severity flaws found in the scan.  # noqa: E501

        :param count_of_medium_sev_flaws: The count_of_medium_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_medium_sev_flaws = count_of_medium_sev_flaws

    @property
    def count_of_very_high_sev_flaws(self):
        """Gets the count_of_very_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501

        Count of very high-severity flaws found in the URL scan.  # noqa: E501

        :return: The count_of_very_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_very_high_sev_flaws

    @count_of_very_high_sev_flaws.setter
    def count_of_very_high_sev_flaws(self, count_of_very_high_sev_flaws):
        """Sets the count_of_very_high_sev_flaws of this DetailedScanOccurrence.

        Count of very high-severity flaws found in the URL scan.  # noqa: E501

        :param count_of_very_high_sev_flaws: The count_of_very_high_sev_flaws of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_very_high_sev_flaws = count_of_very_high_sev_flaws

    @property
    def duration(self):
        """Gets the duration of this DetailedScanOccurrence.  # noqa: E501

        The duration of the URL scan occurrence. If null, no occurrence has run.  # noqa: E501

        :return: The duration of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DetailedScanOccurrence.

        The duration of the URL scan occurrence. If null, no occurrence has run.  # noqa: E501

        :param duration: The duration of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def expected_publish_date(self):
        """Gets the expected_publish_date of this DetailedScanOccurrence.  # noqa: E501

        Date (In ISO-8601 format) when the URL scan occurrence is expected to be published.  # noqa: E501

        :return: The expected_publish_date of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._expected_publish_date

    @expected_publish_date.setter
    def expected_publish_date(self, expected_publish_date):
        """Sets the expected_publish_date of this DetailedScanOccurrence.

        Date (In ISO-8601 format) when the URL scan occurrence is expected to be published.  # noqa: E501

        :param expected_publish_date: The expected_publish_date of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._expected_publish_date = expected_publish_date

    @property
    def has_custom_configuration(self):
        """Gets the has_custom_configuration of this DetailedScanOccurrence.  # noqa: E501

        If true, this URL scan has a custom scan configuration. A custom URL scan configuration scan only be specified by Veracode and overrides the current configuration of the URL scan.    # noqa: E501

        :return: The has_custom_configuration of this DetailedScanOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._has_custom_configuration

    @has_custom_configuration.setter
    def has_custom_configuration(self, has_custom_configuration):
        """Sets the has_custom_configuration of this DetailedScanOccurrence.

        If true, this URL scan has a custom scan configuration. A custom URL scan configuration scan only be specified by Veracode and overrides the current configuration of the URL scan.    # noqa: E501

        :param has_custom_configuration: The has_custom_configuration of this DetailedScanOccurrence.  # noqa: E501
        :type: bool
        """

        self._has_custom_configuration = has_custom_configuration

    @property
    def internal_scan_configuration(self):
        """Gets the internal_scan_configuration of this DetailedScanOccurrence.  # noqa: E501

        Internal scan configuration data, if the URL scan is configured as an internal scan.  # noqa: E501

        :return: The internal_scan_configuration of this DetailedScanOccurrence.  # noqa: E501
        :rtype: InternalScanConfiguration
        """
        return self._internal_scan_configuration

    @internal_scan_configuration.setter
    def internal_scan_configuration(self, internal_scan_configuration):
        """Sets the internal_scan_configuration of this DetailedScanOccurrence.

        Internal scan configuration data, if the URL scan is configured as an internal scan.  # noqa: E501

        :param internal_scan_configuration: The internal_scan_configuration of this DetailedScanOccurrence.  # noqa: E501
        :type: InternalScanConfiguration
        """

        self._internal_scan_configuration = internal_scan_configuration

    @property
    def extended_status(self):
        """Gets the extended_status of this DetailedScanOccurrence.  # noqa: E501

        Additional status information available for this URL scan occurrence.  # noqa: E501

        :return: The extended_status of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._extended_status

    @extended_status.setter
    def extended_status(self, extended_status):
        """Sets the extended_status of this DetailedScanOccurrence.

        Additional status information available for this URL scan occurrence.  # noqa: E501

        :param extended_status: The extended_status of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL_SCAN_SETUP_ERROR", "CREATE_TUNNEL_FAILED_ENDPOINT_UNAVAILABLE", "CREATE_TUNNEL_FAILED_ENDPOINT_ACCESS_DENIED", "GET_TUNNEL_INFO_FAILED_TIMEOUT", "GET_TUNNEL_INFO_FAILED_TUNNEL_NOT_READY", "CREATE_TUNNEL_FAILED_GATEWAY_OFFLINE", "CREATE_TUNNEL_FAILED_ENDPOINT_OFFLINE"]  # noqa: E501
        if extended_status not in allowed_values:
            raise ValueError(
                "Invalid value for `extended_status` ({0}), must be one of {1}"  # noqa: E501
                .format(extended_status, allowed_values)
            )

        self._extended_status = extended_status

    @property
    def linked_platform_app_name(self):
        """Gets the linked_platform_app_name of this DetailedScanOccurrence.  # noqa: E501

        Name of the Veracode Platform application linked to the URL scan.  # noqa: E501

        :return: The linked_platform_app_name of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._linked_platform_app_name

    @linked_platform_app_name.setter
    def linked_platform_app_name(self, linked_platform_app_name):
        """Sets the linked_platform_app_name of this DetailedScanOccurrence.

        Name of the Veracode Platform application linked to the URL scan.  # noqa: E501

        :param linked_platform_app_name: The linked_platform_app_name of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._linked_platform_app_name = linked_platform_app_name

    @property
    def linked_platform_app_uuid(self):
        """Gets the linked_platform_app_uuid of this DetailedScanOccurrence.  # noqa: E501

        UUID of the Veracode Platform application linked to the URL scan.  # noqa: E501

        :return: The linked_platform_app_uuid of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._linked_platform_app_uuid

    @linked_platform_app_uuid.setter
    def linked_platform_app_uuid(self, linked_platform_app_uuid):
        """Sets the linked_platform_app_uuid of this DetailedScanOccurrence.

        UUID of the Veracode Platform application linked to the URL scan.  # noqa: E501

        :param linked_platform_app_uuid: The linked_platform_app_uuid of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._linked_platform_app_uuid = linked_platform_app_uuid

    @property
    def linked_platform_app_id(self):
        """Gets the linked_platform_app_id of this DetailedScanOccurrence.  # noqa: E501

        The numeric identifier of the Veracode Platform application linked to the scan.  # noqa: E501

        :return: The linked_platform_app_id of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._linked_platform_app_id

    @linked_platform_app_id.setter
    def linked_platform_app_id(self, linked_platform_app_id):
        """Sets the linked_platform_app_id of this DetailedScanOccurrence.

        The numeric identifier of the Veracode Platform application linked to the scan.  # noqa: E501

        :param linked_platform_app_id: The linked_platform_app_id of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._linked_platform_app_id = linked_platform_app_id

    @property
    def linked_app_info(self):
        """Gets the linked_app_info of this DetailedScanOccurrence.  # noqa: E501

        Additional Veracode Platform application information, including the results import status.  # noqa: E501

        :return: The linked_app_info of this DetailedScanOccurrence.  # noqa: E501
        :rtype: LinkedAppInfo
        """
        return self._linked_app_info

    @linked_app_info.setter
    def linked_app_info(self, linked_app_info):
        """Sets the linked_app_info of this DetailedScanOccurrence.

        Additional Veracode Platform application information, including the results import status.  # noqa: E501

        :param linked_app_info: The linked_app_info of this DetailedScanOccurrence.  # noqa: E501
        :type: LinkedAppInfo
        """

        self._linked_app_info = linked_app_info

    @property
    def result_import_status(self):
        """Gets the result_import_status of this DetailedScanOccurrence.  # noqa: E501

        The status of the import task, if this occurrence results should be sent to an application if the URL scan is linked.  # noqa: E501

        :return: The result_import_status of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._result_import_status

    @result_import_status.setter
    def result_import_status(self, result_import_status):
        """Sets the result_import_status of this DetailedScanOccurrence.

        The status of the import task, if this occurrence results should be sent to an application if the URL scan is linked.  # noqa: E501

        :param result_import_status: The result_import_status of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUESTED", "INPROGRESS", "COMPLETED", "FAILED", "IGNORED", "INVALID"]  # noqa: E501
        if result_import_status not in allowed_values:
            raise ValueError(
                "Invalid value for `result_import_status` ({0}), must be one of {1}"  # noqa: E501
                .format(result_import_status, allowed_values)
            )

        self._result_import_status = result_import_status

    @property
    def scan_contact_info(self):
        """Gets the scan_contact_info of this DetailedScanOccurrence.  # noqa: E501

        Contact information for the person to received information about the URL scan.  # noqa: E501

        :return: The scan_contact_info of this DetailedScanOccurrence.  # noqa: E501
        :rtype: ContactInformation
        """
        return self._scan_contact_info

    @scan_contact_info.setter
    def scan_contact_info(self, scan_contact_info):
        """Sets the scan_contact_info of this DetailedScanOccurrence.

        Contact information for the person to received information about the URL scan.  # noqa: E501

        :param scan_contact_info: The scan_contact_info of this DetailedScanOccurrence.  # noqa: E501
        :type: ContactInformation
        """

        self._scan_contact_info = scan_contact_info

    @property
    def scan_id(self):
        """Gets the scan_id of this DetailedScanOccurrence.  # noqa: E501

        Identifier of the URL scan on which this occurrence is based.  # noqa: E501

        :return: The scan_id of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this DetailedScanOccurrence.

        Identifier of the URL scan on which this occurrence is based.  # noqa: E501

        :param scan_id: The scan_id of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._scan_id = scan_id

    @property
    def scan_locked(self):
        """Gets the scan_locked of this DetailedScanOccurrence.  # noqa: E501

        If true, this scan occurrence is locked by Veracode and can be edited and resubmitted by Veracode.  # noqa: E501

        :return: The scan_locked of this DetailedScanOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._scan_locked

    @scan_locked.setter
    def scan_locked(self, scan_locked):
        """Sets the scan_locked of this DetailedScanOccurrence.

        If true, this scan occurrence is locked by Veracode and can be edited and resubmitted by Veracode.  # noqa: E501

        :param scan_locked: The scan_locked of this DetailedScanOccurrence.  # noqa: E501
        :type: bool
        """

        self._scan_locked = scan_locked

    @property
    def scan_locked_on(self):
        """Gets the scan_locked_on of this DetailedScanOccurrence.  # noqa: E501

        Time the scan of this URL scan occurrence was locked.  # noqa: E501

        :return: The scan_locked_on of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._scan_locked_on

    @scan_locked_on.setter
    def scan_locked_on(self, scan_locked_on):
        """Sets the scan_locked_on of this DetailedScanOccurrence.

        Time the scan of this URL scan occurrence was locked.  # noqa: E501

        :param scan_locked_on: The scan_locked_on of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._scan_locked_on = scan_locked_on

    @property
    def scheduled_start_date(self):
        """Gets the scheduled_start_date of this DetailedScanOccurrence.  # noqa: E501

        Date and time in ISO-8601 format when the occurrence is scheduled to start.  # noqa: E501

        :return: The scheduled_start_date of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_start_date

    @scheduled_start_date.setter
    def scheduled_start_date(self, scheduled_start_date):
        """Sets the scheduled_start_date of this DetailedScanOccurrence.

        Date and time in ISO-8601 format when the occurrence is scheduled to start.  # noqa: E501

        :param scheduled_start_date: The scheduled_start_date of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._scheduled_start_date = scheduled_start_date

    @property
    def scheduled_end_date(self):
        """Gets the scheduled_end_date of this DetailedScanOccurrence.  # noqa: E501

        Date and time in ISO-8601format when the occurrence is scheduled to end.  # noqa: E501

        :return: The scheduled_end_date of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_end_date

    @scheduled_end_date.setter
    def scheduled_end_date(self, scheduled_end_date):
        """Sets the scheduled_end_date of this DetailedScanOccurrence.

        Date and time in ISO-8601format when the occurrence is scheduled to end.  # noqa: E501

        :param scheduled_end_date: The scheduled_end_date of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._scheduled_end_date = scheduled_end_date

    @property
    def start_date(self):
        """Gets the start_date of this DetailedScanOccurrence.  # noqa: E501

        Actual start date and time, in ISO-8601 format.  # noqa: E501

        :return: The start_date of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DetailedScanOccurrence.

        Actual start date and time, in ISO-8601 format.  # noqa: E501

        :param start_date: The start_date of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DetailedScanOccurrence.  # noqa: E501

        Actual end date and time, in ISO-8601 format.  # noqa: E501

        :return: The end_date of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DetailedScanOccurrence.

        Actual end date and time, in ISO-8601 format.  # noqa: E501

        :param end_date: The end_date of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def status(self):
        """Gets the status of this DetailedScanOccurrence.  # noqa: E501

        The status of the URL scan occurrence. Cannot be null or empty.  # noqa: E501

        :return: The status of this DetailedScanOccurrence.  # noqa: E501
        :rtype: ScanOccurrenceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DetailedScanOccurrence.

        The status of the URL scan occurrence. Cannot be null or empty.  # noqa: E501

        :param status: The status of this DetailedScanOccurrence.  # noqa: E501
        :type: ScanOccurrenceStatus
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this DetailedScanOccurrence.  # noqa: E501

        A summary of the current URL scan occurrence results.  # noqa: E501

        :return: The summary of this DetailedScanOccurrence.  # noqa: E501
        :rtype: ScanOccurrenceRuntimeSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DetailedScanOccurrence.

        A summary of the current URL scan occurrence results.  # noqa: E501

        :param summary: The summary of this DetailedScanOccurrence.  # noqa: E501
        :type: ScanOccurrenceRuntimeSummary
        """

        self._summary = summary

    @property
    def target_url(self):
        """Gets the target_url of this DetailedScanOccurrence.  # noqa: E501

        The target URL of the scan occurrence.  # noqa: E501

        :return: The target_url of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this DetailedScanOccurrence.

        The target URL of the scan occurrence.  # noqa: E501

        :param target_url: The target_url of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._target_url = target_url

    @property
    def total_flaw_count(self):
        """Gets the total_flaw_count of this DetailedScanOccurrence.  # noqa: E501

        Total count of flaws found in the URL scan occurrence.  # noqa: E501

        :return: The total_flaw_count of this DetailedScanOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._total_flaw_count

    @total_flaw_count.setter
    def total_flaw_count(self, total_flaw_count):
        """Sets the total_flaw_count of this DetailedScanOccurrence.

        Total count of flaws found in the URL scan occurrence.  # noqa: E501

        :param total_flaw_count: The total_flaw_count of this DetailedScanOccurrence.  # noqa: E501
        :type: int
        """

        self._total_flaw_count = total_flaw_count

    @property
    def verification_only(self):
        """Gets the verification_only of this DetailedScanOccurrence.  # noqa: E501

        If true, this is a verification-only or prescan occurrence.  # noqa: E501

        :return: The verification_only of this DetailedScanOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._verification_only

    @verification_only.setter
    def verification_only(self, verification_only):
        """Sets the verification_only of this DetailedScanOccurrence.

        If true, this is a verification-only or prescan occurrence.  # noqa: E501

        :param verification_only: The verification_only of this DetailedScanOccurrence.  # noqa: E501
        :type: bool
        """

        self._verification_only = verification_only

    @property
    def verifications(self):
        """Gets the verifications of this DetailedScanOccurrence.  # noqa: E501

        List of verifications done on the scan.  # noqa: E501

        :return: The verifications of this DetailedScanOccurrence.  # noqa: E501
        :rtype: list[ScanVerification]
        """
        return self._verifications

    @verifications.setter
    def verifications(self, verifications):
        """Sets the verifications of this DetailedScanOccurrence.

        List of verifications done on the scan.  # noqa: E501

        :param verifications: The verifications of this DetailedScanOccurrence.  # noqa: E501
        :type: list[ScanVerification]
        """

        self._verifications = verifications

    @property
    def created_on(self):
        """Gets the created_on of this DetailedScanOccurrence.  # noqa: E501

        The UTC-format date and time when URL scan was created.  # noqa: E501

        :return: The created_on of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DetailedScanOccurrence.

        The UTC-format date and time when URL scan was created.  # noqa: E501

        :param created_on: The created_on of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this DetailedScanOccurrence.  # noqa: E501

        The UTC-format date and when the URL scan was last modified.  # noqa: E501

        :return: The last_modified_on of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this DetailedScanOccurrence.

        The UTC-format date and when the URL scan was last modified.  # noqa: E501

        :param last_modified_on: The last_modified_on of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """

        self._last_modified_on = last_modified_on

    @property
    def app_link_type(self):
        """Gets the app_link_type of this DetailedScanOccurrence.  # noqa: E501

        The type of application linking of the scan.  # noqa: E501

        :return: The app_link_type of this DetailedScanOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._app_link_type

    @app_link_type.setter
    def app_link_type(self, app_link_type):
        """Sets the app_link_type of this DetailedScanOccurrence.

        The type of application linking of the scan.  # noqa: E501

        :param app_link_type: The app_link_type of this DetailedScanOccurrence.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO", "MANUAL"]  # noqa: E501
        if app_link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `app_link_type` ({0}), must be one of {1}"  # noqa: E501
                .format(app_link_type, allowed_values)
            )

        self._app_link_type = app_link_type

    @property
    def links(self):
        """Gets the links of this DetailedScanOccurrence.  # noqa: E501


        :return: The links of this DetailedScanOccurrence.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DetailedScanOccurrence.


        :param links: The links of this DetailedScanOccurrence.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def capabilities(self):
        """Gets the capabilities of this DetailedScanOccurrence.  # noqa: E501


        :return: The capabilities of this DetailedScanOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DetailedScanOccurrence.


        :param capabilities: The capabilities of this DetailedScanOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedScanOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedScanOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
