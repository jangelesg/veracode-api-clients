# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VisibilitySetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'setup_type': 'str',
        'team_identifiers': 'list[str]'
    }

    attribute_map = {
        'setup_type': 'setup_type',
        'team_identifiers': 'team_identifiers'
    }

    def __init__(self, setup_type=None, team_identifiers=None):  # noqa: E501
        """VisibilitySetup - a model defined in Swagger"""  # noqa: E501

        self._setup_type = None
        self._team_identifiers = None
        self.discriminator = None

        if setup_type is not None:
            self.setup_type = setup_type
        if team_identifiers is not None:
            self.team_identifiers = team_identifiers

    @property
    def setup_type(self):
        """Gets the setup_type of this VisibilitySetup.  # noqa: E501

        Who visibility is limited to.  # noqa: E501

        :return: The setup_type of this VisibilitySetup.  # noqa: E501
        :rtype: str
        """
        return self._setup_type

    @setup_type.setter
    def setup_type(self, setup_type):
        """Sets the setup_type of this VisibilitySetup.

        Who visibility is limited to.  # noqa: E501

        :param setup_type: The setup_type of this VisibilitySetup.  # noqa: E501
        :type: str
        """
        allowed_values = ["SEC_LEADS_ONLY", "SEC_LEADS_AND_TEAM"]  # noqa: E501
        if setup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `setup_type` ({0}), must be one of {1}"  # noqa: E501
                .format(setup_type, allowed_values)
            )

        self._setup_type = setup_type

    @property
    def team_identifiers(self):
        """Gets the team_identifiers of this VisibilitySetup.  # noqa: E501

        The names of the teams that have access to the Dynamic Analysis.  # noqa: E501

        :return: The team_identifiers of this VisibilitySetup.  # noqa: E501
        :rtype: list[str]
        """
        return self._team_identifiers

    @team_identifiers.setter
    def team_identifiers(self, team_identifiers):
        """Sets the team_identifiers of this VisibilitySetup.

        The names of the teams that have access to the Dynamic Analysis.  # noqa: E501

        :param team_identifiers: The team_identifiers of this VisibilitySetup.  # noqa: E501
        :type: list[str]
        """

        self._team_identifiers = team_identifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisibilitySetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisibilitySetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
