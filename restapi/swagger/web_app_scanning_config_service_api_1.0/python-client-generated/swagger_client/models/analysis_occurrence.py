# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalysisOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_end_date': 'str',
        'actual_start_date': 'str',
        'all_scans_passed_verification': 'bool',
        'analysis_id': 'str',
        'analysis_occurrence_id': 'str',
        'count_of_failed_verifications': 'int',
        'duration': 'str',
        'end_date': 'str',
        'percent_scanned': 'int',
        'start_date': 'str',
        'status': 'AnalysisOccurrenceStatus',
        'verification_only': 'bool',
        'created_on': 'str',
        'last_modified_on': 'str',
        'capabilities': 'list[str]'
    }

    attribute_map = {
        'actual_end_date': 'actual_end_date',
        'actual_start_date': 'actual_start_date',
        'all_scans_passed_verification': 'all_scans_passed_verification',
        'analysis_id': 'analysis_id',
        'analysis_occurrence_id': 'analysis_occurrence_id',
        'count_of_failed_verifications': 'count_of_failed_verifications',
        'duration': 'duration',
        'end_date': 'end_date',
        'percent_scanned': 'percent_scanned',
        'start_date': 'start_date',
        'status': 'status',
        'verification_only': 'verification_only',
        'created_on': 'created_on',
        'last_modified_on': 'last_modified_on',
        'capabilities': 'capabilities'
    }

    def __init__(self, actual_end_date=None, actual_start_date=None, all_scans_passed_verification=None, analysis_id=None, analysis_occurrence_id=None, count_of_failed_verifications=None, duration=None, end_date=None, percent_scanned=None, start_date=None, status=None, verification_only=None, created_on=None, last_modified_on=None, capabilities=None):  # noqa: E501
        """AnalysisOccurrence - a model defined in Swagger"""  # noqa: E501

        self._actual_end_date = None
        self._actual_start_date = None
        self._all_scans_passed_verification = None
        self._analysis_id = None
        self._analysis_occurrence_id = None
        self._count_of_failed_verifications = None
        self._duration = None
        self._end_date = None
        self._percent_scanned = None
        self._start_date = None
        self._status = None
        self._verification_only = None
        self._created_on = None
        self._last_modified_on = None
        self._capabilities = None
        self.discriminator = None

        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if all_scans_passed_verification is not None:
            self.all_scans_passed_verification = all_scans_passed_verification
        if analysis_id is not None:
            self.analysis_id = analysis_id
        if analysis_occurrence_id is not None:
            self.analysis_occurrence_id = analysis_occurrence_id
        if count_of_failed_verifications is not None:
            self.count_of_failed_verifications = count_of_failed_verifications
        if duration is not None:
            self.duration = duration
        if end_date is not None:
            self.end_date = end_date
        if percent_scanned is not None:
            self.percent_scanned = percent_scanned
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if verification_only is not None:
            self.verification_only = verification_only
        if created_on is not None:
            self.created_on = created_on
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this AnalysisOccurrence.  # noqa: E501

        The date and time the Dynamic Analysis ended.  # noqa: E501

        :return: The actual_end_date of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this AnalysisOccurrence.

        The date and time the Dynamic Analysis ended.  # noqa: E501

        :param actual_end_date: The actual_end_date of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._actual_end_date = actual_end_date

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this AnalysisOccurrence.  # noqa: E501

        The date and time the Dynamic Analysis started.  # noqa: E501

        :return: The actual_start_date of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this AnalysisOccurrence.

        The date and time the Dynamic Analysis started.  # noqa: E501

        :param actual_start_date: The actual_start_date of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._actual_start_date = actual_start_date

    @property
    def all_scans_passed_verification(self):
        """Gets the all_scans_passed_verification of this AnalysisOccurrence.  # noqa: E501


        :return: The all_scans_passed_verification of this AnalysisOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._all_scans_passed_verification

    @all_scans_passed_verification.setter
    def all_scans_passed_verification(self, all_scans_passed_verification):
        """Sets the all_scans_passed_verification of this AnalysisOccurrence.


        :param all_scans_passed_verification: The all_scans_passed_verification of this AnalysisOccurrence.  # noqa: E501
        :type: bool
        """

        self._all_scans_passed_verification = all_scans_passed_verification

    @property
    def analysis_id(self):
        """Gets the analysis_id of this AnalysisOccurrence.  # noqa: E501

        Identifier of the Dynamic Analysis an occurrence is based on. This field cannot be null or empty.  # noqa: E501

        :return: The analysis_id of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this AnalysisOccurrence.

        Identifier of the Dynamic Analysis an occurrence is based on. This field cannot be null or empty.  # noqa: E501

        :param analysis_id: The analysis_id of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    @property
    def analysis_occurrence_id(self):
        """Gets the analysis_occurrence_id of this AnalysisOccurrence.  # noqa: E501

        Unique identifier for an occurrence of a Dynamic Analysis. This field cannot be null or empty.  # noqa: E501

        :return: The analysis_occurrence_id of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._analysis_occurrence_id

    @analysis_occurrence_id.setter
    def analysis_occurrence_id(self, analysis_occurrence_id):
        """Sets the analysis_occurrence_id of this AnalysisOccurrence.

        Unique identifier for an occurrence of a Dynamic Analysis. This field cannot be null or empty.  # noqa: E501

        :param analysis_occurrence_id: The analysis_occurrence_id of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._analysis_occurrence_id = analysis_occurrence_id

    @property
    def count_of_failed_verifications(self):
        """Gets the count_of_failed_verifications of this AnalysisOccurrence.  # noqa: E501

        Number of URL scan occurrences that failed verifications.  # noqa: E501

        :return: The count_of_failed_verifications of this AnalysisOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._count_of_failed_verifications

    @count_of_failed_verifications.setter
    def count_of_failed_verifications(self, count_of_failed_verifications):
        """Sets the count_of_failed_verifications of this AnalysisOccurrence.

        Number of URL scan occurrences that failed verifications.  # noqa: E501

        :param count_of_failed_verifications: The count_of_failed_verifications of this AnalysisOccurrence.  # noqa: E501
        :type: int
        """

        self._count_of_failed_verifications = count_of_failed_verifications

    @property
    def duration(self):
        """Gets the duration of this AnalysisOccurrence.  # noqa: E501

        Duration of the Dynamic Analysis occurrence.  # noqa: E501

        :return: The duration of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AnalysisOccurrence.

        Duration of the Dynamic Analysis occurrence.  # noqa: E501

        :param duration: The duration of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def end_date(self):
        """Gets the end_date of this AnalysisOccurrence.  # noqa: E501

        The date and time when the Dynamic Analysis is scheduled to end.  # noqa: E501

        :return: The end_date of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AnalysisOccurrence.

        The date and time when the Dynamic Analysis is scheduled to end.  # noqa: E501

        :param end_date: The end_date of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def percent_scanned(self):
        """Gets the percent_scanned of this AnalysisOccurrence.  # noqa: E501

        The percentage of URL scans completed.  # noqa: E501

        :return: The percent_scanned of this AnalysisOccurrence.  # noqa: E501
        :rtype: int
        """
        return self._percent_scanned

    @percent_scanned.setter
    def percent_scanned(self, percent_scanned):
        """Sets the percent_scanned of this AnalysisOccurrence.

        The percentage of URL scans completed.  # noqa: E501

        :param percent_scanned: The percent_scanned of this AnalysisOccurrence.  # noqa: E501
        :type: int
        """

        self._percent_scanned = percent_scanned

    @property
    def start_date(self):
        """Gets the start_date of this AnalysisOccurrence.  # noqa: E501

        The date and time when the Dynamic Analysis is scheduled to start.  # noqa: E501

        :return: The start_date of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AnalysisOccurrence.

        The date and time when the Dynamic Analysis is scheduled to start.  # noqa: E501

        :param start_date: The start_date of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this AnalysisOccurrence.  # noqa: E501

        The status of the Dynamic Analysis occurrence. This field cannot be null or empty.  # noqa: E501

        :return: The status of this AnalysisOccurrence.  # noqa: E501
        :rtype: AnalysisOccurrenceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalysisOccurrence.

        The status of the Dynamic Analysis occurrence. This field cannot be null or empty.  # noqa: E501

        :param status: The status of this AnalysisOccurrence.  # noqa: E501
        :type: AnalysisOccurrenceStatus
        """

        self._status = status

    @property
    def verification_only(self):
        """Gets the verification_only of this AnalysisOccurrence.  # noqa: E501

        Set this value to true if you want this analysis occurrence to only run for verification purposes.  # noqa: E501

        :return: The verification_only of this AnalysisOccurrence.  # noqa: E501
        :rtype: bool
        """
        return self._verification_only

    @verification_only.setter
    def verification_only(self, verification_only):
        """Sets the verification_only of this AnalysisOccurrence.

        Set this value to true if you want this analysis occurrence to only run for verification purposes.  # noqa: E501

        :param verification_only: The verification_only of this AnalysisOccurrence.  # noqa: E501
        :type: bool
        """

        self._verification_only = verification_only

    @property
    def created_on(self):
        """Gets the created_on of this AnalysisOccurrence.  # noqa: E501

        The UTC-format for the date and time when the Dynamic Analysis was created.  # noqa: E501

        :return: The created_on of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AnalysisOccurrence.

        The UTC-format for the date and time when the Dynamic Analysis was created.  # noqa: E501

        :param created_on: The created_on of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this AnalysisOccurrence.  # noqa: E501

        The UTC-format for the date and time when the Dynamic Analysis was last modified.  # noqa: E501

        :return: The last_modified_on of this AnalysisOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this AnalysisOccurrence.

        The UTC-format for the date and time when the Dynamic Analysis was last modified.  # noqa: E501

        :param last_modified_on: The last_modified_on of this AnalysisOccurrence.  # noqa: E501
        :type: str
        """

        self._last_modified_on = last_modified_on

    @property
    def capabilities(self):
        """Gets the capabilities of this AnalysisOccurrence.  # noqa: E501


        :return: The capabilities of this AnalysisOccurrence.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this AnalysisOccurrence.


        :param capabilities: The capabilities of this AnalysisOccurrence.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
