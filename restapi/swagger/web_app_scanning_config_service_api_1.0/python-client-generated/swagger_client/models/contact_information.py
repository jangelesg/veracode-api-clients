# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContactInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_and_last_name': 'str',
        'telephone': 'str'
    }

    attribute_map = {
        'email': 'email',
        'first_and_last_name': 'first_and_last_name',
        'telephone': 'telephone'
    }

    def __init__(self, email=None, first_and_last_name=None, telephone=None):  # noqa: E501
        """ContactInformation - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._first_and_last_name = None
        self._telephone = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if first_and_last_name is not None:
            self.first_and_last_name = first_and_last_name
        if telephone is not None:
            self.telephone = telephone

    @property
    def email(self):
        """Gets the email of this ContactInformation.  # noqa: E501

        Valid email address.  # noqa: E501

        :return: The email of this ContactInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactInformation.

        Valid email address.  # noqa: E501

        :param email: The email of this ContactInformation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_and_last_name(self):
        """Gets the first_and_last_name of this ContactInformation.  # noqa: E501

        First and last name.  # noqa: E501

        :return: The first_and_last_name of this ContactInformation.  # noqa: E501
        :rtype: str
        """
        return self._first_and_last_name

    @first_and_last_name.setter
    def first_and_last_name(self, first_and_last_name):
        """Sets the first_and_last_name of this ContactInformation.

        First and last name.  # noqa: E501

        :param first_and_last_name: The first_and_last_name of this ContactInformation.  # noqa: E501
        :type: str
        """

        self._first_and_last_name = first_and_last_name

    @property
    def telephone(self):
        """Gets the telephone of this ContactInformation.  # noqa: E501

        Optional telephone number.  # noqa: E501

        :return: The telephone of this ContactInformation.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this ContactInformation.

        Optional telephone number.  # noqa: E501

        :param telephone: The telephone of this ContactInformation.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
