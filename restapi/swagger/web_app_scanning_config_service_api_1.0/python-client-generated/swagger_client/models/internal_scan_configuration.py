# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InternalScanConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'endpoint_id': 'str',
        'gateway_id': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'endpoint_id': 'endpoint_id',
        'gateway_id': 'gateway_id'
    }

    def __init__(self, enabled=None, endpoint_id=None, gateway_id=None):  # noqa: E501
        """InternalScanConfiguration - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._endpoint_id = None
        self._gateway_id = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if gateway_id is not None:
            self.gateway_id = gateway_id

    @property
    def enabled(self):
        """Gets the enabled of this InternalScanConfiguration.  # noqa: E501

        Set to true after you have configured an ISM scan.  # noqa: E501

        :return: The enabled of this InternalScanConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InternalScanConfiguration.

        Set to true after you have configured an ISM scan.  # noqa: E501

        :param enabled: The enabled of this InternalScanConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this InternalScanConfiguration.  # noqa: E501

        The endpoint Identifier.  # noqa: E501

        :return: The endpoint_id of this InternalScanConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this InternalScanConfiguration.

        The endpoint Identifier.  # noqa: E501

        :param endpoint_id: The endpoint_id of this InternalScanConfiguration.  # noqa: E501
        :type: str
        """

        self._endpoint_id = endpoint_id

    @property
    def gateway_id(self):
        """Gets the gateway_id of this InternalScanConfiguration.  # noqa: E501

        The gateway identifer.  # noqa: E501

        :return: The gateway_id of this InternalScanConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this InternalScanConfiguration.

        The gateway identifer.  # noqa: E501

        :param gateway_id: The gateway_id of this InternalScanConfiguration.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalScanConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalScanConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
