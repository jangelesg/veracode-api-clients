# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HttpResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_code': 'str',
        'redirect_url': 'str',
        'response_truncated': 'bool',
        'malformed': 'bool',
        'raw_response': 'str'
    }

    attribute_map = {
        'response_code': 'response_code',
        'redirect_url': 'redirect_url',
        'response_truncated': 'response_truncated',
        'malformed': 'malformed',
        'raw_response': 'raw_response'
    }

    def __init__(self, response_code=None, redirect_url=None, response_truncated=None, malformed=None, raw_response=None):  # noqa: E501
        """HttpResponseData - a model defined in Swagger"""  # noqa: E501

        self._response_code = None
        self._redirect_url = None
        self._response_truncated = None
        self._malformed = None
        self._raw_response = None
        self.discriminator = None

        if response_code is not None:
            self.response_code = response_code
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if response_truncated is not None:
            self.response_truncated = response_truncated
        if malformed is not None:
            self.malformed = malformed
        if raw_response is not None:
            self.raw_response = raw_response

    @property
    def response_code(self):
        """Gets the response_code of this HttpResponseData.  # noqa: E501

        HTTP Response code.  # noqa: E501

        :return: The response_code of this HttpResponseData.  # noqa: E501
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this HttpResponseData.

        HTTP Response code.  # noqa: E501

        :param response_code: The response_code of this HttpResponseData.  # noqa: E501
        :type: str
        """

        self._response_code = response_code

    @property
    def redirect_url(self):
        """Gets the redirect_url of this HttpResponseData.  # noqa: E501

        If the response code was one of 3xx, the redirect URL specified in response.  # noqa: E501

        :return: The redirect_url of this HttpResponseData.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this HttpResponseData.

        If the response code was one of 3xx, the redirect URL specified in response.  # noqa: E501

        :param redirect_url: The redirect_url of this HttpResponseData.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def response_truncated(self):
        """Gets the response_truncated of this HttpResponseData.  # noqa: E501

        If the response is too large, it will be trucated in the raw_response field below. The value of this field will be true in that case.   # noqa: E501

        :return: The response_truncated of this HttpResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._response_truncated

    @response_truncated.setter
    def response_truncated(self, response_truncated):
        """Sets the response_truncated of this HttpResponseData.

        If the response is too large, it will be trucated in the raw_response field below. The value of this field will be true in that case.   # noqa: E501

        :param response_truncated: The response_truncated of this HttpResponseData.  # noqa: E501
        :type: bool
        """

        self._response_truncated = response_truncated

    @property
    def malformed(self):
        """Gets the malformed of this HttpResponseData.  # noqa: E501

        If true, the response was determined as malformed, e.g. not adhering to HTTP standards.  # noqa: E501

        :return: The malformed of this HttpResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._malformed

    @malformed.setter
    def malformed(self, malformed):
        """Sets the malformed of this HttpResponseData.

        If true, the response was determined as malformed, e.g. not adhering to HTTP standards.  # noqa: E501

        :param malformed: The malformed of this HttpResponseData.  # noqa: E501
        :type: bool
        """

        self._malformed = malformed

    @property
    def raw_response(self):
        """Gets the raw_response of this HttpResponseData.  # noqa: E501

        The raw response bytes in the response, encoded in base64. The string may become truncated if it is too long.  # noqa: E501

        :return: The raw_response of this HttpResponseData.  # noqa: E501
        :rtype: str
        """
        return self._raw_response

    @raw_response.setter
    def raw_response(self, raw_response):
        """Sets the raw_response of this HttpResponseData.

        The raw response bytes in the response, encoded in base64. The string may become truncated if it is too long.  # noqa: E501

        :param raw_response: The raw_response of this HttpResponseData.  # noqa: E501
        :type: str
        """

        self._raw_response = raw_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
