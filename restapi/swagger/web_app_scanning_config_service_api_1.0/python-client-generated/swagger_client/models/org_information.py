# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrgInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_unit_id': 'str',
        'email': 'str',
        'owner': 'str'
    }

    attribute_map = {
        'business_unit_id': 'business_unit_id',
        'email': 'email',
        'owner': 'owner'
    }

    def __init__(self, business_unit_id=None, email=None, owner=None):  # noqa: E501
        """OrgInformation - a model defined in Swagger"""  # noqa: E501

        self._business_unit_id = None
        self._email = None
        self._owner = None
        self.discriminator = None

        if business_unit_id is not None:
            self.business_unit_id = business_unit_id
        if email is not None:
            self.email = email
        if owner is not None:
            self.owner = owner

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this OrgInformation.  # noqa: E501

        The identifier of the business unit associated with the Dynamic Analysis.  # noqa: E501

        :return: The business_unit_id of this OrgInformation.  # noqa: E501
        :rtype: str
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this OrgInformation.

        The identifier of the business unit associated with the Dynamic Analysis.  # noqa: E501

        :param business_unit_id: The business_unit_id of this OrgInformation.  # noqa: E501
        :type: str
        """

        self._business_unit_id = business_unit_id

    @property
    def email(self):
        """Gets the email of this OrgInformation.  # noqa: E501

        Contact email information where notifications related to Dynamic Analysis are sent.  # noqa: E501

        :return: The email of this OrgInformation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrgInformation.

        Contact email information where notifications related to Dynamic Analysis are sent.  # noqa: E501

        :param email: The email of this OrgInformation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def owner(self):
        """Gets the owner of this OrgInformation.  # noqa: E501

        Optional name of the person responsible for the Dynamic Analysis.  # noqa: E501

        :return: The owner of this OrgInformation.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this OrgInformation.

        Optional name of the person responsible for the Dynamic Analysis.  # noqa: E501

        :param owner: The owner of this OrgInformation.  # noqa: E501
        :type: str
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
