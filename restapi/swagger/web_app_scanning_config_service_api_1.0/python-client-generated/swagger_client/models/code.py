# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Code(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'default': 'bool',
        'deprecated': 'bool',
        'fix': 'str',
        'generic': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'default': 'default',
        'deprecated': 'deprecated',
        'fix': 'fix',
        'generic': 'generic'
    }

    def __init__(self, id=None, name=None, description=None, default=None, deprecated=None, fix=None, generic=None):  # noqa: E501
        """Code - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._default = None
        self._deprecated = None
        self._fix = None
        self._generic = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if default is not None:
            self.default = default
        if deprecated is not None:
            self.deprecated = deprecated
        if fix is not None:
            self.fix = fix
        if generic is not None:
            self.generic = generic

    @property
    def id(self):
        """Gets the id of this Code.  # noqa: E501

        Identifier of the code, such as an enum value.  # noqa: E501

        :return: The id of this Code.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Code.

        Identifier of the code, such as an enum value.  # noqa: E501

        :param id: The id of this Code.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Code.  # noqa: E501

        Display name for the code. The value depends on the type of code group.  # noqa: E501

        :return: The name of this Code.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Code.

        Display name for the code. The value depends on the type of code group.  # noqa: E501

        :param name: The name of this Code.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Code.  # noqa: E501

        Longer, optional description of the code.  # noqa: E501

        :return: The description of this Code.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Code.

        Longer, optional description of the code.  # noqa: E501

        :param description: The description of this Code.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default(self):
        """Gets the default of this Code.  # noqa: E501

        If this code group represents a choice of values, then this code is the default. There can only be one default code in a code group.  # noqa: E501

        :return: The default of this Code.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Code.

        If this code group represents a choice of values, then this code is the default. There can only be one default code in a code group.  # noqa: E501

        :param default: The default of this Code.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def deprecated(self):
        """Gets the deprecated of this Code.  # noqa: E501

        If true, do not use this value anymore. It is present for backwards compatibility.  # noqa: E501

        :return: The deprecated of this Code.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this Code.

        If true, do not use this value anymore. It is present for backwards compatibility.  # noqa: E501

        :param deprecated: The deprecated of this Code.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def fix(self):
        """Gets the fix of this Code.  # noqa: E501

        If this code group captures errors, then this optional record represents a possible fix or workaround for the error.  # noqa: E501

        :return: The fix of this Code.  # noqa: E501
        :rtype: str
        """
        return self._fix

    @fix.setter
    def fix(self, fix):
        """Sets the fix of this Code.

        If this code group captures errors, then this optional record represents a possible fix or workaround for the error.  # noqa: E501

        :param fix: The fix of this Code.  # noqa: E501
        :type: str
        """

        self._fix = fix

    @property
    def generic(self):
        """Gets the generic of this Code.  # noqa: E501

        This field is only returned for top-level errors.  # noqa: E501

        :return: The generic of this Code.  # noqa: E501
        :rtype: bool
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this Code.

        This field is only returned for top-level errors.  # noqa: E501

        :param generic: The generic of this Code.  # noqa: E501
        :type: bool
        """

        self._generic = generic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Code, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Code):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
