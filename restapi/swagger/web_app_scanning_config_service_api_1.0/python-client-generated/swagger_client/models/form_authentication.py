# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FormAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authtype': 'str',
        'authentication_id': 'str',
        'login_script_data': 'Script',
        'logout_script_data': 'Script',
        'verification': 'LoginVerification',
        'logout_detection': 'LogoutDetection'
    }

    attribute_map = {
        'authtype': 'authtype',
        'authentication_id': 'authentication_id',
        'login_script_data': 'login_script_data',
        'logout_script_data': 'logout_script_data',
        'verification': 'verification',
        'logout_detection': 'logout_detection'
    }

    def __init__(self, authtype=None, authentication_id=None, login_script_data=None, logout_script_data=None, verification=None, logout_detection=None):  # noqa: E501
        """FormAuthentication - a model defined in Swagger"""  # noqa: E501

        self._authtype = None
        self._authentication_id = None
        self._login_script_data = None
        self._logout_script_data = None
        self._verification = None
        self._logout_detection = None
        self.discriminator = None

        if authtype is not None:
            self.authtype = authtype
        if authentication_id is not None:
            self.authentication_id = authentication_id
        if login_script_data is not None:
            self.login_script_data = login_script_data
        if logout_script_data is not None:
            self.logout_script_data = logout_script_data
        if verification is not None:
            self.verification = verification
        if logout_detection is not None:
            self.logout_detection = logout_detection

    @property
    def authtype(self):
        """Gets the authtype of this FormAuthentication.  # noqa: E501

        The type of authentication. Only the value FORM is expected.  # noqa: E501

        :return: The authtype of this FormAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._authtype

    @authtype.setter
    def authtype(self, authtype):
        """Sets the authtype of this FormAuthentication.

        The type of authentication. Only the value FORM is expected.  # noqa: E501

        :param authtype: The authtype of this FormAuthentication.  # noqa: E501
        :type: str
        """

        self._authtype = authtype

    @property
    def authentication_id(self):
        """Gets the authentication_id of this FormAuthentication.  # noqa: E501

        Unique identifier locator.  # noqa: E501

        :return: The authentication_id of this FormAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._authentication_id

    @authentication_id.setter
    def authentication_id(self, authentication_id):
        """Sets the authentication_id of this FormAuthentication.

        Unique identifier locator.  # noqa: E501

        :param authentication_id: The authentication_id of this FormAuthentication.  # noqa: E501
        :type: str
        """

        self._authentication_id = authentication_id

    @property
    def login_script_data(self):
        """Gets the login_script_data of this FormAuthentication.  # noqa: E501

        The login script.  # noqa: E501

        :return: The login_script_data of this FormAuthentication.  # noqa: E501
        :rtype: Script
        """
        return self._login_script_data

    @login_script_data.setter
    def login_script_data(self, login_script_data):
        """Sets the login_script_data of this FormAuthentication.

        The login script.  # noqa: E501

        :param login_script_data: The login_script_data of this FormAuthentication.  # noqa: E501
        :type: Script
        """

        self._login_script_data = login_script_data

    @property
    def logout_script_data(self):
        """Gets the logout_script_data of this FormAuthentication.  # noqa: E501

        The logout script, which is required if advanced mode scanning is configured.  # noqa: E501

        :return: The logout_script_data of this FormAuthentication.  # noqa: E501
        :rtype: Script
        """
        return self._logout_script_data

    @logout_script_data.setter
    def logout_script_data(self, logout_script_data):
        """Sets the logout_script_data of this FormAuthentication.

        The logout script, which is required if advanced mode scanning is configured.  # noqa: E501

        :param logout_script_data: The logout_script_data of this FormAuthentication.  # noqa: E501
        :type: Script
        """

        self._logout_script_data = logout_script_data

    @property
    def verification(self):
        """Gets the verification of this FormAuthentication.  # noqa: E501

        The verification to use, which is not required if advanced mode scanning is configured.  # noqa: E501

        :return: The verification of this FormAuthentication.  # noqa: E501
        :rtype: LoginVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this FormAuthentication.

        The verification to use, which is not required if advanced mode scanning is configured.  # noqa: E501

        :param verification: The verification of this FormAuthentication.  # noqa: E501
        :type: LoginVerification
        """

        self._verification = verification

    @property
    def logout_detection(self):
        """Gets the logout_detection of this FormAuthentication.  # noqa: E501

        The type of logout detection to use. If verification is already specified, this is ignored. It is not required if advanced mode scanning is configured.  # noqa: E501

        :return: The logout_detection of this FormAuthentication.  # noqa: E501
        :rtype: LogoutDetection
        """
        return self._logout_detection

    @logout_detection.setter
    def logout_detection(self, logout_detection):
        """Sets the logout_detection of this FormAuthentication.

        The type of logout detection to use. If verification is already specified, this is ignored. It is not required if advanced mode scanning is configured.  # noqa: E501

        :param logout_detection: The logout_detection of this FormAuthentication.  # noqa: E501
        :type: LogoutDetection
        """

        self._logout_detection = logout_detection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
