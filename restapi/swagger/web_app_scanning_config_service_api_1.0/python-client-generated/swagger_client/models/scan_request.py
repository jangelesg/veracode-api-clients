# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'scan_id': 'str',
        'scan_contact_info': 'ContactInformation',
        'scan_config_request': 'ScanConfigurationRequest',
        'linked_platform_app_uuid': 'str',
        'internal_scan_configuration': 'InternalScanConfiguration'
    }

    attribute_map = {
        'action_type': 'action_type',
        'scan_id': 'scan_id',
        'scan_contact_info': 'scan_contact_info',
        'scan_config_request': 'scan_config_request',
        'linked_platform_app_uuid': 'linked_platform_app_uuid',
        'internal_scan_configuration': 'internal_scan_configuration'
    }

    def __init__(self, action_type=None, scan_id=None, scan_contact_info=None, scan_config_request=None, linked_platform_app_uuid=None, internal_scan_configuration=None):  # noqa: E501
        """ScanRequest - a model defined in Swagger"""  # noqa: E501

        self._action_type = None
        self._scan_id = None
        self._scan_contact_info = None
        self._scan_config_request = None
        self._linked_platform_app_uuid = None
        self._internal_scan_configuration = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if scan_id is not None:
            self.scan_id = scan_id
        if scan_contact_info is not None:
            self.scan_contact_info = scan_contact_info
        if scan_config_request is not None:
            self.scan_config_request = scan_config_request
        if linked_platform_app_uuid is not None:
            self.linked_platform_app_uuid = linked_platform_app_uuid
        if internal_scan_configuration is not None:
            self.internal_scan_configuration = internal_scan_configuration

    @property
    def action_type(self):
        """Gets the action_type of this ScanRequest.  # noqa: E501

        Optional action type for when bulk scan requests are being modified for a single Dynamic Analysis.  # noqa: E501

        :return: The action_type of this ScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ScanRequest.

        Optional action type for when bulk scan requests are being modified for a single Dynamic Analysis.  # noqa: E501

        :param action_type: The action_type of this ScanRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD", "UPDATE_SELECTIVE", "UPDATE_CLOBBER", "REMOVE"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def scan_id(self):
        """Gets the scan_id of this ScanRequest.  # noqa: E501

        Unique identifier of the URL scan. Only necessary for updates.  # noqa: E501

        :return: The scan_id of this ScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this ScanRequest.

        Unique identifier of the URL scan. Only necessary for updates.  # noqa: E501

        :param scan_id: The scan_id of this ScanRequest.  # noqa: E501
        :type: str
        """

        self._scan_id = scan_id

    @property
    def scan_contact_info(self):
        """Gets the scan_contact_info of this ScanRequest.  # noqa: E501


        :return: The scan_contact_info of this ScanRequest.  # noqa: E501
        :rtype: ContactInformation
        """
        return self._scan_contact_info

    @scan_contact_info.setter
    def scan_contact_info(self, scan_contact_info):
        """Sets the scan_contact_info of this ScanRequest.


        :param scan_contact_info: The scan_contact_info of this ScanRequest.  # noqa: E501
        :type: ContactInformation
        """

        self._scan_contact_info = scan_contact_info

    @property
    def scan_config_request(self):
        """Gets the scan_config_request of this ScanRequest.  # noqa: E501


        :return: The scan_config_request of this ScanRequest.  # noqa: E501
        :rtype: ScanConfigurationRequest
        """
        return self._scan_config_request

    @scan_config_request.setter
    def scan_config_request(self, scan_config_request):
        """Sets the scan_config_request of this ScanRequest.


        :param scan_config_request: The scan_config_request of this ScanRequest.  # noqa: E501
        :type: ScanConfigurationRequest
        """

        self._scan_config_request = scan_config_request

    @property
    def linked_platform_app_uuid(self):
        """Gets the linked_platform_app_uuid of this ScanRequest.  # noqa: E501

        UUID of the Veracode Platform application to which this URL scan should link. Optional.  # noqa: E501

        :return: The linked_platform_app_uuid of this ScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._linked_platform_app_uuid

    @linked_platform_app_uuid.setter
    def linked_platform_app_uuid(self, linked_platform_app_uuid):
        """Sets the linked_platform_app_uuid of this ScanRequest.

        UUID of the Veracode Platform application to which this URL scan should link. Optional.  # noqa: E501

        :param linked_platform_app_uuid: The linked_platform_app_uuid of this ScanRequest.  # noqa: E501
        :type: str
        """

        self._linked_platform_app_uuid = linked_platform_app_uuid

    @property
    def internal_scan_configuration(self):
        """Gets the internal_scan_configuration of this ScanRequest.  # noqa: E501


        :return: The internal_scan_configuration of this ScanRequest.  # noqa: E501
        :rtype: InternalScanConfiguration
        """
        return self._internal_scan_configuration

    @internal_scan_configuration.setter
    def internal_scan_configuration(self, internal_scan_configuration):
        """Sets the internal_scan_configuration of this ScanRequest.


        :param internal_scan_configuration: The internal_scan_configuration of this ScanRequest.  # noqa: E501
        :type: InternalScanConfiguration
        """

        self._internal_scan_configuration = internal_scan_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
