# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuditData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audited_on': 'str',
        'event_type': 'str',
        'details': 'str',
        'new_value': 'str',
        'old_value': 'str',
        'parent_record_id': 'str',
        'parent_record_type': 'str',
        'proxy_user': 'bool',
        'system_user': 'bool',
        'user_display_name': 'str',
        'user_id': 'str',
        'username': 'str'
    }

    attribute_map = {
        'audited_on': 'audited_on',
        'event_type': 'event_type',
        'details': 'details',
        'new_value': 'new_value',
        'old_value': 'old_value',
        'parent_record_id': 'parent_record_id',
        'parent_record_type': 'parent_record_type',
        'proxy_user': 'proxy_user',
        'system_user': 'system_user',
        'user_display_name': 'user_display_name',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, audited_on=None, event_type=None, details=None, new_value=None, old_value=None, parent_record_id=None, parent_record_type=None, proxy_user=None, system_user=None, user_display_name=None, user_id=None, username=None):  # noqa: E501
        """AuditData - a model defined in Swagger"""  # noqa: E501

        self._audited_on = None
        self._event_type = None
        self._details = None
        self._new_value = None
        self._old_value = None
        self._parent_record_id = None
        self._parent_record_type = None
        self._proxy_user = None
        self._system_user = None
        self._user_display_name = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if audited_on is not None:
            self.audited_on = audited_on
        if event_type is not None:
            self.event_type = event_type
        if details is not None:
            self.details = details
        if new_value is not None:
            self.new_value = new_value
        if old_value is not None:
            self.old_value = old_value
        if parent_record_id is not None:
            self.parent_record_id = parent_record_id
        if parent_record_type is not None:
            self.parent_record_type = parent_record_type
        if proxy_user is not None:
            self.proxy_user = proxy_user
        if system_user is not None:
            self.system_user = system_user
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def audited_on(self):
        """Gets the audited_on of this AuditData.  # noqa: E501

        The date and time in ISO-8601 format when this activity log audit entry was created.  # noqa: E501

        :return: The audited_on of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._audited_on

    @audited_on.setter
    def audited_on(self, audited_on):
        """Sets the audited_on of this AuditData.

        The date and time in ISO-8601 format when this activity log audit entry was created.  # noqa: E501

        :param audited_on: The audited_on of this AuditData.  # noqa: E501
        :type: str
        """

        self._audited_on = audited_on

    @property
    def event_type(self):
        """Gets the event_type of this AuditData.  # noqa: E501

        The event type that triggered the activity log audit entry.  # noqa: E501

        :return: The event_type of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuditData.

        The event type that triggered the activity log audit entry.  # noqa: E501

        :param event_type: The event_type of this AuditData.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def details(self):
        """Gets the details of this AuditData.  # noqa: E501

        Additional details about the activity log audit entry.  # noqa: E501

        :return: The details of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AuditData.

        Additional details about the activity log audit entry.  # noqa: E501

        :param details: The details of this AuditData.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def new_value(self):
        """Gets the new_value of this AuditData.  # noqa: E501

        The new activity log audit entry value after update. Note: Sensitive values like passwords are not recorded in the activity log but the event entry is.   # noqa: E501

        :return: The new_value of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this AuditData.

        The new activity log audit entry value after update. Note: Sensitive values like passwords are not recorded in the activity log but the event entry is.   # noqa: E501

        :param new_value: The new_value of this AuditData.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this AuditData.  # noqa: E501

        The new activity log audit entry value before update. Note: Sensitive values like passwords are not recorded in the activity log but the event entry is.   # noqa: E501

        :return: The old_value of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this AuditData.

        The new activity log audit entry value before update. Note: Sensitive values like passwords are not recorded in the activity log but the event entry is.   # noqa: E501

        :param old_value: The old_value of this AuditData.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def parent_record_id(self):
        """Gets the parent_record_id of this AuditData.  # noqa: E501

        The identity of the parent entity whose change triggered the activity log audit entry.  # noqa: E501

        :return: The parent_record_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._parent_record_id

    @parent_record_id.setter
    def parent_record_id(self, parent_record_id):
        """Sets the parent_record_id of this AuditData.

        The identity of the parent entity whose change triggered the activity log audit entry.  # noqa: E501

        :param parent_record_id: The parent_record_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._parent_record_id = parent_record_id

    @property
    def parent_record_type(self):
        """Gets the parent_record_type of this AuditData.  # noqa: E501

        The type of the parent entity whose change triggred the activity log audit entry.  # noqa: E501

        :return: The parent_record_type of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._parent_record_type

    @parent_record_type.setter
    def parent_record_type(self, parent_record_type):
        """Sets the parent_record_type of this AuditData.

        The type of the parent entity whose change triggred the activity log audit entry.  # noqa: E501

        :param parent_record_type: The parent_record_type of this AuditData.  # noqa: E501
        :type: str
        """

        self._parent_record_type = parent_record_type

    @property
    def proxy_user(self):
        """Gets the proxy_user of this AuditData.  # noqa: E501

        If true, this was created by a user who was proxied.  # noqa: E501

        :return: The proxy_user of this AuditData.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_user

    @proxy_user.setter
    def proxy_user(self, proxy_user):
        """Sets the proxy_user of this AuditData.

        If true, this was created by a user who was proxied.  # noqa: E501

        :param proxy_user: The proxy_user of this AuditData.  # noqa: E501
        :type: bool
        """

        self._proxy_user = proxy_user

    @property
    def system_user(self):
        """Gets the system_user of this AuditData.  # noqa: E501

        If true, this was created by a system-automated process.  # noqa: E501

        :return: The system_user of this AuditData.  # noqa: E501
        :rtype: bool
        """
        return self._system_user

    @system_user.setter
    def system_user(self, system_user):
        """Sets the system_user of this AuditData.

        If true, this was created by a system-automated process.  # noqa: E501

        :param system_user: The system_user of this AuditData.  # noqa: E501
        :type: bool
        """

        self._system_user = system_user

    @property
    def user_display_name(self):
        """Gets the user_display_name of this AuditData.  # noqa: E501

        Display name of the user that created the activity log audit event, typically concatenated from the first and last names.  # noqa: E501

        :return: The user_display_name of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this AuditData.

        Display name of the user that created the activity log audit event, typically concatenated from the first and last names.  # noqa: E501

        :param user_display_name: The user_display_name of this AuditData.  # noqa: E501
        :type: str
        """

        self._user_display_name = user_display_name

    @property
    def user_id(self):
        """Gets the user_id of this AuditData.  # noqa: E501

        Identity of the user who created the activity log audit event.  # noqa: E501

        :return: The user_id of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditData.

        Identity of the user who created the activity log audit event.  # noqa: E501

        :param user_id: The user_id of this AuditData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this AuditData.  # noqa: E501

        Username of the user who created the activity log audit event.  # noqa: E501

        :return: The username of this AuditData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuditData.

        Username of the user who created the activity log audit event.  # noqa: E501

        :param username: The username of this AuditData.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
