# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CrawlScript(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawl_script_data': 'Script',
        'crawl_script_id': 'str',
        'number_scripts': 'int'
    }

    attribute_map = {
        'crawl_script_data': 'crawl_script_data',
        'crawl_script_id': 'crawl_script_id',
        'number_scripts': 'number_scripts'
    }

    def __init__(self, crawl_script_data=None, crawl_script_id=None, number_scripts=None):  # noqa: E501
        """CrawlScript - a model defined in Swagger"""  # noqa: E501

        self._crawl_script_data = None
        self._crawl_script_id = None
        self._number_scripts = None
        self.discriminator = None

        if crawl_script_data is not None:
            self.crawl_script_data = crawl_script_data
        if crawl_script_id is not None:
            self.crawl_script_id = crawl_script_id
        if number_scripts is not None:
            self.number_scripts = number_scripts

    @property
    def crawl_script_data(self):
        """Gets the crawl_script_data of this CrawlScript.  # noqa: E501


        :return: The crawl_script_data of this CrawlScript.  # noqa: E501
        :rtype: Script
        """
        return self._crawl_script_data

    @crawl_script_data.setter
    def crawl_script_data(self, crawl_script_data):
        """Sets the crawl_script_data of this CrawlScript.


        :param crawl_script_data: The crawl_script_data of this CrawlScript.  # noqa: E501
        :type: Script
        """

        self._crawl_script_data = crawl_script_data

    @property
    def crawl_script_id(self):
        """Gets the crawl_script_id of this CrawlScript.  # noqa: E501

        Unique script locator. Absent when not persisted.  # noqa: E501

        :return: The crawl_script_id of this CrawlScript.  # noqa: E501
        :rtype: str
        """
        return self._crawl_script_id

    @crawl_script_id.setter
    def crawl_script_id(self, crawl_script_id):
        """Sets the crawl_script_id of this CrawlScript.

        Unique script locator. Absent when not persisted.  # noqa: E501

        :param crawl_script_id: The crawl_script_id of this CrawlScript.  # noqa: E501
        :type: str
        """

        self._crawl_script_id = crawl_script_id

    @property
    def number_scripts(self):
        """Gets the number_scripts of this CrawlScript.  # noqa: E501

        Number of crawl scripts. Present only in response, ignored in request.  # noqa: E501

        :return: The number_scripts of this CrawlScript.  # noqa: E501
        :rtype: int
        """
        return self._number_scripts

    @number_scripts.setter
    def number_scripts(self, number_scripts):
        """Sets the number_scripts of this CrawlScript.

        Number of crawl scripts. Present only in response, ignored in request.  # noqa: E501

        :param number_scripts: The number_scripts of this CrawlScript.  # noqa: E501
        :type: int
        """

        self._number_scripts = number_scripts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrawlScript, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrawlScript):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
