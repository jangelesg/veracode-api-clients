# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanURL(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'directory_restriction_type': 'str',
        'http_and_https': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'directory_restriction_type': 'directory_restriction_type',
        'http_and_https': 'http_and_https',
        'url': 'url'
    }

    def __init__(self, directory_restriction_type=None, http_and_https=None, url=None):  # noqa: E501
        """ScanURL - a model defined in Swagger"""  # noqa: E501

        self._directory_restriction_type = None
        self._http_and_https = None
        self._url = None
        self.discriminator = None

        if directory_restriction_type is not None:
            self.directory_restriction_type = directory_restriction_type
        if http_and_https is not None:
            self.http_and_https = http_and_https
        if url is not None:
            self.url = url

    @property
    def directory_restriction_type(self):
        """Gets the directory_restriction_type of this ScanURL.  # noqa: E501

        Directories to which you want to restrict the scope during scanning. The default is DIRECTORY AND SUBDIRECTORY.  # noqa: E501

        :return: The directory_restriction_type of this ScanURL.  # noqa: E501
        :rtype: str
        """
        return self._directory_restriction_type

    @directory_restriction_type.setter
    def directory_restriction_type(self, directory_restriction_type):
        """Sets the directory_restriction_type of this ScanURL.

        Directories to which you want to restrict the scope during scanning. The default is DIRECTORY AND SUBDIRECTORY.  # noqa: E501

        :param directory_restriction_type: The directory_restriction_type of this ScanURL.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIRECTORY_AND_SUBDIRECTORY", "FOLDER_ONLY", "FILE", "NONE"]  # noqa: E501
        if directory_restriction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `directory_restriction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(directory_restriction_type, allowed_values)
            )

        self._directory_restriction_type = directory_restriction_type

    @property
    def http_and_https(self):
        """Gets the http_and_https of this ScanURL.  # noqa: E501

        If true, both HTTP and HTTPS protocols apply even if the base URL is only one of those. The default is true.  # noqa: E501

        :return: The http_and_https of this ScanURL.  # noqa: E501
        :rtype: bool
        """
        return self._http_and_https

    @http_and_https.setter
    def http_and_https(self, http_and_https):
        """Sets the http_and_https of this ScanURL.

        If true, both HTTP and HTTPS protocols apply even if the base URL is only one of those. The default is true.  # noqa: E501

        :param http_and_https: The http_and_https of this ScanURL.  # noqa: E501
        :type: bool
        """

        self._http_and_https = http_and_https

    @property
    def url(self):
        """Gets the url of this ScanURL.  # noqa: E501

        The valid base URL.  # noqa: E501

        :return: The url of this ScanURL.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScanURL.

        The valid base URL.  # noqa: E501

        :param url: The url of this ScanURL.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanURL, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanURL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
