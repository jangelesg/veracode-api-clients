# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capabilities': 'list[str]',
        'default_scan_setting': 'ScanSetting',
        'auto_link_options': 'object'
    }

    attribute_map = {
        'capabilities': 'capabilities',
        'default_scan_setting': 'default_scan_setting',
        'auto_link_options': 'auto_link_options'
    }

    def __init__(self, capabilities=None, default_scan_setting=None, auto_link_options=None):  # noqa: E501
        """UserConfiguration - a model defined in Swagger"""  # noqa: E501

        self._capabilities = None
        self._default_scan_setting = None
        self._auto_link_options = None
        self.discriminator = None

        if capabilities is not None:
            self.capabilities = capabilities
        if default_scan_setting is not None:
            self.default_scan_setting = default_scan_setting
        if auto_link_options is not None:
            self.auto_link_options = auto_link_options

    @property
    def capabilities(self):
        """Gets the capabilities of this UserConfiguration.  # noqa: E501

        The capabilities of the current user.  # noqa: E501

        :return: The capabilities of this UserConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this UserConfiguration.

        The capabilities of the current user.  # noqa: E501

        :param capabilities: The capabilities of this UserConfiguration.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["link_platform_app", "create_analysis", "select_visibility_type", "select_internal_scan"]  # noqa: E501
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def default_scan_setting(self):
        """Gets the default_scan_setting of this UserConfiguration.  # noqa: E501

        The default scan setting that is applied to any Dynamic Analysis or URL scan created by this user unless configured or overridden by the user. The default scan setting is generated by combining the system and the account default scan setting.   # noqa: E501

        :return: The default_scan_setting of this UserConfiguration.  # noqa: E501
        :rtype: ScanSetting
        """
        return self._default_scan_setting

    @default_scan_setting.setter
    def default_scan_setting(self, default_scan_setting):
        """Sets the default_scan_setting of this UserConfiguration.

        The default scan setting that is applied to any Dynamic Analysis or URL scan created by this user unless configured or overridden by the user. The default scan setting is generated by combining the system and the account default scan setting.   # noqa: E501

        :param default_scan_setting: The default_scan_setting of this UserConfiguration.  # noqa: E501
        :type: ScanSetting
        """

        self._default_scan_setting = default_scan_setting

    @property
    def auto_link_options(self):
        """Gets the auto_link_options of this UserConfiguration.  # noqa: E501

        The account-level auto-linking options when enabled.   # noqa: E501

        :return: The auto_link_options of this UserConfiguration.  # noqa: E501
        :rtype: object
        """
        return self._auto_link_options

    @auto_link_options.setter
    def auto_link_options(self, auto_link_options):
        """Sets the auto_link_options of this UserConfiguration.

        The account-level auto-linking options when enabled.   # noqa: E501

        :param auto_link_options: The auto_link_options of this UserConfiguration.  # noqa: E501
        :type: object
        """

        self._auto_link_options = auto_link_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
