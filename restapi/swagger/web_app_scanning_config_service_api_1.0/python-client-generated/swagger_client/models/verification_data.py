# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VerificationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outcome': 'str',
        'code': 'str',
        'verification_type': 'str'
    }

    attribute_map = {
        'outcome': 'outcome',
        'code': 'code',
        'verification_type': 'verification_type'
    }

    discriminator_value_class_map = {
        'AuthenticationVerificationData': 'AuthenticationVerificationData',
        'ConnectionVerificationData': 'ConnectionVerificationData'
    }

    def __init__(self, outcome=None, code=None, verification_type=None):  # noqa: E501
        """VerificationData - a model defined in Swagger"""  # noqa: E501

        self._outcome = None
        self._code = None
        self._verification_type = None
        self.discriminator = 'verification_type'

        if outcome is not None:
            self.outcome = outcome
        if code is not None:
            self.code = code
        self.verification_type = verification_type

    @property
    def outcome(self):
        """Gets the outcome of this VerificationData.  # noqa: E501

        Outcome of the verification.  # noqa: E501

        :return: The outcome of this VerificationData.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this VerificationData.

        Outcome of the verification.  # noqa: E501

        :param outcome: The outcome of this VerificationData.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "WARNING"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"  # noqa: E501
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def code(self):
        """Gets the code of this VerificationData.  # noqa: E501

        Specific to the type of verification.  # noqa: E501

        :return: The code of this VerificationData.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VerificationData.

        Specific to the type of verification.  # noqa: E501

        :param code: The code of this VerificationData.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def verification_type(self):
        """Gets the verification_type of this VerificationData.  # noqa: E501

        Type of verification data.  # noqa: E501

        :return: The verification_type of this VerificationData.  # noqa: E501
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this VerificationData.

        Type of verification data.  # noqa: E501

        :param verification_type: The verification_type of this VerificationData.  # noqa: E501
        :type: str
        """
        if verification_type is None:
            raise ValueError("Invalid value for `verification_type`, must not be `None`")  # noqa: E501
        allowed_values = ["AUTHENTICATION_CONFIGURATION", "CONNECTION"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerificationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
