# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanCapacitySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_scan_capacity': 'int',
        'throttled_analyses_occurrence_count': 'int',
        'org': 'str'
    }

    attribute_map = {
        'max_scan_capacity': 'max_scan_capacity',
        'throttled_analyses_occurrence_count': 'throttled_analyses_occurrence_count',
        'org': 'org'
    }

    def __init__(self, max_scan_capacity=None, throttled_analyses_occurrence_count=None, org=None):  # noqa: E501
        """ScanCapacitySummary - a model defined in Swagger"""  # noqa: E501

        self._max_scan_capacity = None
        self._throttled_analyses_occurrence_count = None
        self._org = None
        self.discriminator = None

        if max_scan_capacity is not None:
            self.max_scan_capacity = max_scan_capacity
        if throttled_analyses_occurrence_count is not None:
            self.throttled_analyses_occurrence_count = throttled_analyses_occurrence_count
        if org is not None:
            self.org = org

    @property
    def max_scan_capacity(self):
        """Gets the max_scan_capacity of this ScanCapacitySummary.  # noqa: E501

        Maximum number of concurrent URL scan occurrences allowed for this account based on current license status.  # noqa: E501

        :return: The max_scan_capacity of this ScanCapacitySummary.  # noqa: E501
        :rtype: int
        """
        return self._max_scan_capacity

    @max_scan_capacity.setter
    def max_scan_capacity(self, max_scan_capacity):
        """Sets the max_scan_capacity of this ScanCapacitySummary.

        Maximum number of concurrent URL scan occurrences allowed for this account based on current license status.  # noqa: E501

        :param max_scan_capacity: The max_scan_capacity of this ScanCapacitySummary.  # noqa: E501
        :type: int
        """

        self._max_scan_capacity = max_scan_capacity

    @property
    def throttled_analyses_occurrence_count(self):
        """Gets the throttled_analyses_occurrence_count of this ScanCapacitySummary.  # noqa: E501

        Number of Dynamic Analysis occurrences that are throttled because one or more URL scan occurrences within a Dynamic Analysis are throttled.  # noqa: E501

        :return: The throttled_analyses_occurrence_count of this ScanCapacitySummary.  # noqa: E501
        :rtype: int
        """
        return self._throttled_analyses_occurrence_count

    @throttled_analyses_occurrence_count.setter
    def throttled_analyses_occurrence_count(self, throttled_analyses_occurrence_count):
        """Sets the throttled_analyses_occurrence_count of this ScanCapacitySummary.

        Number of Dynamic Analysis occurrences that are throttled because one or more URL scan occurrences within a Dynamic Analysis are throttled.  # noqa: E501

        :param throttled_analyses_occurrence_count: The throttled_analyses_occurrence_count of this ScanCapacitySummary.  # noqa: E501
        :type: int
        """

        self._throttled_analyses_occurrence_count = throttled_analyses_occurrence_count

    @property
    def org(self):
        """Gets the org of this ScanCapacitySummary.  # noqa: E501


        :return: The org of this ScanCapacitySummary.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this ScanCapacitySummary.


        :param org: The org of this ScanCapacitySummary.  # noqa: E501
        :type: str
        """

        self._org = org

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanCapacitySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanCapacitySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
