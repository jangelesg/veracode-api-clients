# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanConfigurationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_hosts': 'list[ScanURL]',
        'auth_configuration': 'AuthenticationConfiguration',
        'crawl_configuration': 'CrawlConfiguration',
        'scan_setting': 'ScanSetting',
        'target_url': 'ScanURL'
    }

    attribute_map = {
        'allowed_hosts': 'allowed_hosts',
        'auth_configuration': 'auth_configuration',
        'crawl_configuration': 'crawl_configuration',
        'scan_setting': 'scan_setting',
        'target_url': 'target_url'
    }

    def __init__(self, allowed_hosts=None, auth_configuration=None, crawl_configuration=None, scan_setting=None, target_url=None):  # noqa: E501
        """ScanConfigurationRequest - a model defined in Swagger"""  # noqa: E501

        self._allowed_hosts = None
        self._auth_configuration = None
        self._crawl_configuration = None
        self._scan_setting = None
        self._target_url = None
        self.discriminator = None

        if allowed_hosts is not None:
            self.allowed_hosts = allowed_hosts
        if auth_configuration is not None:
            self.auth_configuration = auth_configuration
        if crawl_configuration is not None:
            self.crawl_configuration = crawl_configuration
        if scan_setting is not None:
            self.scan_setting = scan_setting
        if target_url is not None:
            self.target_url = target_url

    @property
    def allowed_hosts(self):
        """Gets the allowed_hosts of this ScanConfigurationRequest.  # noqa: E501

        Additional allowed hosts for the URL scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :return: The allowed_hosts of this ScanConfigurationRequest.  # noqa: E501
        :rtype: list[ScanURL]
        """
        return self._allowed_hosts

    @allowed_hosts.setter
    def allowed_hosts(self, allowed_hosts):
        """Sets the allowed_hosts of this ScanConfigurationRequest.

        Additional allowed hosts for the URL scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :param allowed_hosts: The allowed_hosts of this ScanConfigurationRequest.  # noqa: E501
        :type: list[ScanURL]
        """

        self._allowed_hosts = allowed_hosts

    @property
    def auth_configuration(self):
        """Gets the auth_configuration of this ScanConfigurationRequest.  # noqa: E501

        Authentication configuration for the URL scan.  # noqa: E501

        :return: The auth_configuration of this ScanConfigurationRequest.  # noqa: E501
        :rtype: AuthenticationConfiguration
        """
        return self._auth_configuration

    @auth_configuration.setter
    def auth_configuration(self, auth_configuration):
        """Sets the auth_configuration of this ScanConfigurationRequest.

        Authentication configuration for the URL scan.  # noqa: E501

        :param auth_configuration: The auth_configuration of this ScanConfigurationRequest.  # noqa: E501
        :type: AuthenticationConfiguration
        """

        self._auth_configuration = auth_configuration

    @property
    def crawl_configuration(self):
        """Gets the crawl_configuration of this ScanConfigurationRequest.  # noqa: E501

        Crawl configuration for the URL scan.  # noqa: E501

        :return: The crawl_configuration of this ScanConfigurationRequest.  # noqa: E501
        :rtype: CrawlConfiguration
        """
        return self._crawl_configuration

    @crawl_configuration.setter
    def crawl_configuration(self, crawl_configuration):
        """Sets the crawl_configuration of this ScanConfigurationRequest.

        Crawl configuration for the URL scan.  # noqa: E501

        :param crawl_configuration: The crawl_configuration of this ScanConfigurationRequest.  # noqa: E501
        :type: CrawlConfiguration
        """

        self._crawl_configuration = crawl_configuration

    @property
    def scan_setting(self):
        """Gets the scan_setting of this ScanConfigurationRequest.  # noqa: E501

        URL scan setting. Not mandatory and not everything must be specified.  # noqa: E501

        :return: The scan_setting of this ScanConfigurationRequest.  # noqa: E501
        :rtype: ScanSetting
        """
        return self._scan_setting

    @scan_setting.setter
    def scan_setting(self, scan_setting):
        """Sets the scan_setting of this ScanConfigurationRequest.

        URL scan setting. Not mandatory and not everything must be specified.  # noqa: E501

        :param scan_setting: The scan_setting of this ScanConfigurationRequest.  # noqa: E501
        :type: ScanSetting
        """

        self._scan_setting = scan_setting

    @property
    def target_url(self):
        """Gets the target_url of this ScanConfigurationRequest.  # noqa: E501

        Target URL for the scan with rules such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :return: The target_url of this ScanConfigurationRequest.  # noqa: E501
        :rtype: ScanURL
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this ScanConfigurationRequest.

        Target URL for the scan with rules such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :param target_url: The target_url of this ScanConfigurationRequest.  # noqa: E501
        :type: ScanURL
        """

        self._target_url = target_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanConfigurationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanConfigurationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
