# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanDuration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'int',
        'unit': 'str'
    }

    attribute_map = {
        'length': 'length',
        'unit': 'unit'
    }

    def __init__(self, length=None, unit=None):  # noqa: E501
        """ScanDuration - a model defined in Swagger"""  # noqa: E501

        self._length = None
        self._unit = None
        self.discriminator = None

        if length is not None:
            self.length = length
        if unit is not None:
            self.unit = unit

    @property
    def length(self):
        """Gets the length of this ScanDuration.  # noqa: E501

        The maximum time the URL scan can run. If the value is zero or less, you must specify the end date in the URL scan schedule.   # noqa: E501

        :return: The length of this ScanDuration.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ScanDuration.

        The maximum time the URL scan can run. If the value is zero or less, you must specify the end date in the URL scan schedule.   # noqa: E501

        :param length: The length of this ScanDuration.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def unit(self):
        """Gets the unit of this ScanDuration.  # noqa: E501

        Unit of duration.  # noqa: E501

        :return: The unit of this ScanDuration.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ScanDuration.

        Unit of duration.  # noqa: E501

        :param unit: The unit of this ScanDuration.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAY", "HOUR", "MINUTE"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanDuration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanDuration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
