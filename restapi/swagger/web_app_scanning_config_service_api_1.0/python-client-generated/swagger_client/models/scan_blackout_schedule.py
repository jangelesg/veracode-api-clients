# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanBlackoutSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blackout_days': 'str',
        'blackout_end_time': 'str',
        'blackout_start_time': 'str',
        'blackout_type': 'str'
    }

    attribute_map = {
        'blackout_days': 'blackout_days',
        'blackout_end_time': 'blackout_end_time',
        'blackout_start_time': 'blackout_start_time',
        'blackout_type': 'blackout_type'
    }

    def __init__(self, blackout_days=None, blackout_end_time=None, blackout_start_time=None, blackout_type=None):  # noqa: E501
        """ScanBlackoutSchedule - a model defined in Swagger"""  # noqa: E501

        self._blackout_days = None
        self._blackout_end_time = None
        self._blackout_start_time = None
        self._blackout_type = None
        self.discriminator = None

        if blackout_days is not None:
            self.blackout_days = blackout_days
        if blackout_end_time is not None:
            self.blackout_end_time = blackout_end_time
        if blackout_start_time is not None:
            self.blackout_start_time = blackout_start_time
        if blackout_type is not None:
            self.blackout_type = blackout_type

    @property
    def blackout_days(self):
        """Gets the blackout_days of this ScanBlackoutSchedule.  # noqa: E501

        The comma-separated list of days within the blackout period. For example, TUESDAY, THURSDAY.  # noqa: E501

        :return: The blackout_days of this ScanBlackoutSchedule.  # noqa: E501
        :rtype: str
        """
        return self._blackout_days

    @blackout_days.setter
    def blackout_days(self, blackout_days):
        """Sets the blackout_days of this ScanBlackoutSchedule.

        The comma-separated list of days within the blackout period. For example, TUESDAY, THURSDAY.  # noqa: E501

        :param blackout_days: The blackout_days of this ScanBlackoutSchedule.  # noqa: E501
        :type: str
        """

        self._blackout_days = blackout_days

    @property
    def blackout_end_time(self):
        """Gets the blackout_end_time of this ScanBlackoutSchedule.  # noqa: E501

        Indicates the end time of a blackout period in HH:MM format.  # noqa: E501

        :return: The blackout_end_time of this ScanBlackoutSchedule.  # noqa: E501
        :rtype: str
        """
        return self._blackout_end_time

    @blackout_end_time.setter
    def blackout_end_time(self, blackout_end_time):
        """Sets the blackout_end_time of this ScanBlackoutSchedule.

        Indicates the end time of a blackout period in HH:MM format.  # noqa: E501

        :param blackout_end_time: The blackout_end_time of this ScanBlackoutSchedule.  # noqa: E501
        :type: str
        """

        self._blackout_end_time = blackout_end_time

    @property
    def blackout_start_time(self):
        """Gets the blackout_start_time of this ScanBlackoutSchedule.  # noqa: E501

        Indicates the start time of a blackout period in HH:MM format.  # noqa: E501

        :return: The blackout_start_time of this ScanBlackoutSchedule.  # noqa: E501
        :rtype: str
        """
        return self._blackout_start_time

    @blackout_start_time.setter
    def blackout_start_time(self, blackout_start_time):
        """Sets the blackout_start_time of this ScanBlackoutSchedule.

        Indicates the start time of a blackout period in HH:MM format.  # noqa: E501

        :param blackout_start_time: The blackout_start_time of this ScanBlackoutSchedule.  # noqa: E501
        :type: str
        """

        self._blackout_start_time = blackout_start_time

    @property
    def blackout_type(self):
        """Gets the blackout_type of this ScanBlackoutSchedule.  # noqa: E501

        Indicates the blackout window schedule type.  # noqa: E501

        :return: The blackout_type of this ScanBlackoutSchedule.  # noqa: E501
        :rtype: str
        """
        return self._blackout_type

    @blackout_type.setter
    def blackout_type(self, blackout_type):
        """Sets the blackout_type of this ScanBlackoutSchedule.

        Indicates the blackout window schedule type.  # noqa: E501

        :param blackout_type: The blackout_type of this ScanBlackoutSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["THESE_HOURS", "THESE_DAYS", "WEEKDAYS", "WEEKEND"]  # noqa: E501
        if blackout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `blackout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(blackout_type, allowed_values)
            )

        self._blackout_type = blackout_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanBlackoutSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanBlackoutSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
