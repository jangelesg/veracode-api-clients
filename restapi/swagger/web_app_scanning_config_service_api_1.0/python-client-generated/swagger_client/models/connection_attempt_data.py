# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectionAttemptData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_initiated': 'float',
        'response_time': 'float',
        'scope': 'str',
        'request': 'HttpRequestData',
        'response': 'HttpResponseData'
    }

    attribute_map = {
        'time_initiated': 'time_initiated',
        'response_time': 'response_time',
        'scope': 'scope',
        'request': 'request',
        'response': 'response'
    }

    def __init__(self, time_initiated=None, response_time=None, scope=None, request=None, response=None):  # noqa: E501
        """ConnectionAttemptData - a model defined in Swagger"""  # noqa: E501

        self._time_initiated = None
        self._response_time = None
        self._scope = None
        self._request = None
        self._response = None
        self.discriminator = None

        if time_initiated is not None:
            self.time_initiated = time_initiated
        if response_time is not None:
            self.response_time = response_time
        if scope is not None:
            self.scope = scope
        if request is not None:
            self.request = request
        if response is not None:
            self.response = response

    @property
    def time_initiated(self):
        """Gets the time_initiated of this ConnectionAttemptData.  # noqa: E501

        The UTC time in milliseconds when the connection attempt was initiated.  # noqa: E501

        :return: The time_initiated of this ConnectionAttemptData.  # noqa: E501
        :rtype: float
        """
        return self._time_initiated

    @time_initiated.setter
    def time_initiated(self, time_initiated):
        """Sets the time_initiated of this ConnectionAttemptData.

        The UTC time in milliseconds when the connection attempt was initiated.  # noqa: E501

        :param time_initiated: The time_initiated of this ConnectionAttemptData.  # noqa: E501
        :type: float
        """

        self._time_initiated = time_initiated

    @property
    def response_time(self):
        """Gets the response_time of this ConnectionAttemptData.  # noqa: E501

        The UTC elapsed time for the completion of the request, in milliseconds, nullable.  # noqa: E501

        :return: The response_time of this ConnectionAttemptData.  # noqa: E501
        :rtype: float
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this ConnectionAttemptData.

        The UTC elapsed time for the completion of the request, in milliseconds, nullable.  # noqa: E501

        :param response_time: The response_time of this ConnectionAttemptData.  # noqa: E501
        :type: float
        """

        self._response_time = response_time

    @property
    def scope(self):
        """Gets the scope of this ConnectionAttemptData.  # noqa: E501

        The scopr of the request as evaluated by the scanner based on target URL, whitelist and blacklist.  # noqa: E501

        :return: The scope of this ConnectionAttemptData.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ConnectionAttemptData.

        The scopr of the request as evaluated by the scanner based on target URL, whitelist and blacklist.  # noqa: E501

        :param scope: The scope of this ConnectionAttemptData.  # noqa: E501
        :type: str
        """
        allowed_values = ["WHITE", "GRAY", "BLACK"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def request(self):
        """Gets the request of this ConnectionAttemptData.  # noqa: E501

        Details of the HTTP Request that was sent.   # noqa: E501

        :return: The request of this ConnectionAttemptData.  # noqa: E501
        :rtype: HttpRequestData
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ConnectionAttemptData.

        Details of the HTTP Request that was sent.   # noqa: E501

        :param request: The request of this ConnectionAttemptData.  # noqa: E501
        :type: HttpRequestData
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this ConnectionAttemptData.  # noqa: E501

        Details of the HTTP Request that was sent.   # noqa: E501

        :return: The response of this ConnectionAttemptData.  # noqa: E501
        :rtype: HttpResponseData
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ConnectionAttemptData.

        Details of the HTTP Request that was sent.   # noqa: E501

        :param response: The response of this ConnectionAttemptData.  # noqa: E501
        :type: HttpResponseData
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionAttemptData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionAttemptData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
