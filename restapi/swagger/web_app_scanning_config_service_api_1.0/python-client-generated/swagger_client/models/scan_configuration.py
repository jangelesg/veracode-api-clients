# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_url': 'ScanURL',
        'allowed_hosts': 'list[ScanURL]',
        'auth_configuration': 'AuthenticationConfiguration',
        'crawl_configuration': 'CrawlConfiguration',
        'scan_setting': 'ScanSetting',
        'capabilities': 'list[str]'
    }

    attribute_map = {
        'target_url': 'target_url',
        'allowed_hosts': 'allowed_hosts',
        'auth_configuration': 'auth_configuration',
        'crawl_configuration': 'crawl_configuration',
        'scan_setting': 'scan_setting',
        'capabilities': 'capabilities'
    }

    def __init__(self, target_url=None, allowed_hosts=None, auth_configuration=None, crawl_configuration=None, scan_setting=None, capabilities=None):  # noqa: E501
        """ScanConfiguration - a model defined in Swagger"""  # noqa: E501

        self._target_url = None
        self._allowed_hosts = None
        self._auth_configuration = None
        self._crawl_configuration = None
        self._scan_setting = None
        self._capabilities = None
        self.discriminator = None

        if target_url is not None:
            self.target_url = target_url
        if allowed_hosts is not None:
            self.allowed_hosts = allowed_hosts
        if auth_configuration is not None:
            self.auth_configuration = auth_configuration
        if crawl_configuration is not None:
            self.crawl_configuration = crawl_configuration
        if scan_setting is not None:
            self.scan_setting = scan_setting
        if capabilities is not None:
            self.capabilities = capabilities

    @property
    def target_url(self):
        """Gets the target_url of this ScanConfiguration.  # noqa: E501

        Target URL for the scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :return: The target_url of this ScanConfiguration.  # noqa: E501
        :rtype: ScanURL
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this ScanConfiguration.

        Target URL for the scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :param target_url: The target_url of this ScanConfiguration.  # noqa: E501
        :type: ScanURL
        """

        self._target_url = target_url

    @property
    def allowed_hosts(self):
        """Gets the allowed_hosts of this ScanConfiguration.  # noqa: E501

        Additional allowed hosts for the URL scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :return: The allowed_hosts of this ScanConfiguration.  # noqa: E501
        :rtype: list[ScanURL]
        """
        return self._allowed_hosts

    @allowed_hosts.setter
    def allowed_hosts(self, allowed_hosts):
        """Sets the allowed_hosts of this ScanConfiguration.

        Additional allowed hosts for the URL scan with rules, such as a scan of both HTTP and HTTPS protocols or the restriction of the URL scan to a specific directory type.  # noqa: E501

        :param allowed_hosts: The allowed_hosts of this ScanConfiguration.  # noqa: E501
        :type: list[ScanURL]
        """

        self._allowed_hosts = allowed_hosts

    @property
    def auth_configuration(self):
        """Gets the auth_configuration of this ScanConfiguration.  # noqa: E501

        Authentication configuration for the URL scan.  # noqa: E501

        :return: The auth_configuration of this ScanConfiguration.  # noqa: E501
        :rtype: AuthenticationConfiguration
        """
        return self._auth_configuration

    @auth_configuration.setter
    def auth_configuration(self, auth_configuration):
        """Sets the auth_configuration of this ScanConfiguration.

        Authentication configuration for the URL scan.  # noqa: E501

        :param auth_configuration: The auth_configuration of this ScanConfiguration.  # noqa: E501
        :type: AuthenticationConfiguration
        """

        self._auth_configuration = auth_configuration

    @property
    def crawl_configuration(self):
        """Gets the crawl_configuration of this ScanConfiguration.  # noqa: E501

        Crawl configuration for the URL scan.  # noqa: E501

        :return: The crawl_configuration of this ScanConfiguration.  # noqa: E501
        :rtype: CrawlConfiguration
        """
        return self._crawl_configuration

    @crawl_configuration.setter
    def crawl_configuration(self, crawl_configuration):
        """Sets the crawl_configuration of this ScanConfiguration.

        Crawl configuration for the URL scan.  # noqa: E501

        :param crawl_configuration: The crawl_configuration of this ScanConfiguration.  # noqa: E501
        :type: CrawlConfiguration
        """

        self._crawl_configuration = crawl_configuration

    @property
    def scan_setting(self):
        """Gets the scan_setting of this ScanConfiguration.  # noqa: E501

        Settings for the URL scan. You do not have to specify all the settings. Any settings you do specificy at the  URL scan configuration level override or add to the Dynamic Analysis configuration level.   # noqa: E501

        :return: The scan_setting of this ScanConfiguration.  # noqa: E501
        :rtype: ScanSetting
        """
        return self._scan_setting

    @scan_setting.setter
    def scan_setting(self, scan_setting):
        """Sets the scan_setting of this ScanConfiguration.

        Settings for the URL scan. You do not have to specify all the settings. Any settings you do specificy at the  URL scan configuration level override or add to the Dynamic Analysis configuration level.   # noqa: E501

        :param scan_setting: The scan_setting of this ScanConfiguration.  # noqa: E501
        :type: ScanSetting
        """

        self._scan_setting = scan_setting

    @property
    def capabilities(self):
        """Gets the capabilities of this ScanConfiguration.  # noqa: E501


        :return: The capabilities of this ScanConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ScanConfiguration.


        :param capabilities: The capabilities of this ScanConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
