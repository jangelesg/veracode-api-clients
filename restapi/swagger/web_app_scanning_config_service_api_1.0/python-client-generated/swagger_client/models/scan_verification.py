# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScanVerification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_codes': 'list[str]',
        'success': 'bool',
        'verification_type': 'str'
    }

    attribute_map = {
        'error_codes': 'error_codes',
        'success': 'success',
        'verification_type': 'verification_type'
    }

    def __init__(self, error_codes=None, success=None, verification_type=None):  # noqa: E501
        """ScanVerification - a model defined in Swagger"""  # noqa: E501

        self._error_codes = None
        self._success = None
        self._verification_type = None
        self.discriminator = None

        if error_codes is not None:
            self.error_codes = error_codes
        if success is not None:
            self.success = success
        if verification_type is not None:
            self.verification_type = verification_type

    @property
    def error_codes(self):
        """Gets the error_codes of this ScanVerification.  # noqa: E501

        List of error codes, which only appear if verification was not successful.  # noqa: E501

        :return: The error_codes of this ScanVerification.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this ScanVerification.

        List of error codes, which only appear if verification was not successful.  # noqa: E501

        :param error_codes: The error_codes of this ScanVerification.  # noqa: E501
        :type: list[str]
        """

        self._error_codes = error_codes

    @property
    def success(self):
        """Gets the success of this ScanVerification.  # noqa: E501

        If true, this value indicates that verification was successful.  # noqa: E501

        :return: The success of this ScanVerification.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ScanVerification.

        If true, this value indicates that verification was successful.  # noqa: E501

        :param success: The success of this ScanVerification.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def verification_type(self):
        """Gets the verification_type of this ScanVerification.  # noqa: E501


        :return: The verification_type of this ScanVerification.  # noqa: E501
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this ScanVerification.


        :param verification_type: The verification_type of this ScanVerification.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONNECTION", "AUTHENTICATION"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanVerification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanVerification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
