# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Script(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_body': 'str',
        'script_type': 'str'
    }

    attribute_map = {
        'script_body': 'script_body',
        'script_type': 'script_type'
    }

    def __init__(self, script_body=None, script_type=None):  # noqa: E501
        """Script - a model defined in Swagger"""  # noqa: E501

        self._script_body = None
        self._script_type = None
        self.discriminator = None

        if script_body is not None:
            self.script_body = script_body
        if script_type is not None:
            self.script_type = script_type

    @property
    def script_body(self):
        """Gets the script_body of this Script.  # noqa: E501

        The body of the script, up to 20 MB.  # noqa: E501

        :return: The script_body of this Script.  # noqa: E501
        :rtype: str
        """
        return self._script_body

    @script_body.setter
    def script_body(self, script_body):
        """Sets the script_body of this Script.

        The body of the script, up to 20 MB.  # noqa: E501

        :param script_body: The script_body of this Script.  # noqa: E501
        :type: str
        """

        self._script_body = script_body

    @property
    def script_type(self):
        """Gets the script_type of this Script.  # noqa: E501

        The type of script. Selenium is the only supported format. Both JSON and HTML-formatted Selenium scripts are  supported. However, not all commands may be supported. A validation error is reported if an unsupported  command is used.   # noqa: E501

        :return: The script_type of this Script.  # noqa: E501
        :rtype: str
        """
        return self._script_type

    @script_type.setter
    def script_type(self, script_type):
        """Sets the script_type of this Script.

        The type of script. Selenium is the only supported format. Both JSON and HTML-formatted Selenium scripts are  supported. However, not all commands may be supported. A validation error is reported if an unsupported  command is used.   # noqa: E501

        :param script_type: The script_type of this Script.  # noqa: E501
        :type: str
        """
        allowed_values = ["SELENIUM"]  # noqa: E501
        if script_type not in allowed_values:
            raise ValueError(
                "Invalid value for `script_type` ({0}), must be one of {1}"  # noqa: E501
                .format(script_type, allowed_values)
            )

        self._script_type = script_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Script, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Script):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
