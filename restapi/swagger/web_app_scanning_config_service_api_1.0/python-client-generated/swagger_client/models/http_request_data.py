# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HttpRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'str',
        'uri': 'str',
        'host': 'str',
        'port': 'str',
        'path': 'str',
        'raw_request': 'str'
    }

    attribute_map = {
        'method': 'method',
        'uri': 'uri',
        'host': 'host',
        'port': 'port',
        'path': 'path',
        'raw_request': 'raw_request'
    }

    def __init__(self, method=None, uri=None, host=None, port=None, path=None, raw_request=None):  # noqa: E501
        """HttpRequestData - a model defined in Swagger"""  # noqa: E501

        self._method = None
        self._uri = None
        self._host = None
        self._port = None
        self._path = None
        self._raw_request = None
        self.discriminator = None

        if method is not None:
            self.method = method
        if uri is not None:
            self.uri = uri
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if path is not None:
            self.path = path
        if raw_request is not None:
            self.raw_request = raw_request

    @property
    def method(self):
        """Gets the method of this HttpRequestData.  # noqa: E501

        Value of the HTTP method header.  # noqa: E501

        :return: The method of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HttpRequestData.

        Value of the HTTP method header.  # noqa: E501

        :param method: The method of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def uri(self):
        """Gets the uri of this HttpRequestData.  # noqa: E501

        URI the request was sent to.  # noqa: E501

        :return: The uri of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this HttpRequestData.

        URI the request was sent to.  # noqa: E501

        :param uri: The uri of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def host(self):
        """Gets the host of this HttpRequestData.  # noqa: E501

        The host the request was sent to.  # noqa: E501

        :return: The host of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this HttpRequestData.

        The host the request was sent to.  # noqa: E501

        :param host: The host of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this HttpRequestData.  # noqa: E501

        String representation of the port number the request was sent to.  # noqa: E501

        :return: The port of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HttpRequestData.

        String representation of the port number the request was sent to.  # noqa: E501

        :param port: The port of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def path(self):
        """Gets the path of this HttpRequestData.  # noqa: E501

        Path the request was sent to.  # noqa: E501

        :return: The path of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this HttpRequestData.

        Path the request was sent to.  # noqa: E501

        :param path: The path of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def raw_request(self):
        """Gets the raw_request of this HttpRequestData.  # noqa: E501

        The raw request bytes in the request, encoded in base64.  # noqa: E501

        :return: The raw_request of this HttpRequestData.  # noqa: E501
        :rtype: str
        """
        return self._raw_request

    @raw_request.setter
    def raw_request(self, raw_request):
        """Sets the raw_request of this HttpRequestData.

        The raw request bytes in the request, encoded in base64.  # noqa: E501

        :param raw_request: The raw_request of this HttpRequestData.  # noqa: E501
        :type: str
        """

        self._raw_request = raw_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpRequestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
