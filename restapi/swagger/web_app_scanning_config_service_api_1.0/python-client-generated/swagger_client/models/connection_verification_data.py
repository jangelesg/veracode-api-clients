# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConnectionVerificationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_type': 'str',
        'url': 'str',
        'resolved_ip_address': 'str',
        'browser_used': 'bool',
        'attempts': 'list[ConnectionAttemptData]'
    }

    attribute_map = {
        'url_type': 'url_type',
        'url': 'url',
        'resolved_ip_address': 'resolved_ip_address',
        'browser_used': 'browser_used',
        'attempts': 'attempts'
    }

    def __init__(self, url_type=None, url=None, resolved_ip_address=None, browser_used=None, attempts=None):  # noqa: E501
        """ConnectionVerificationData - a model defined in Swagger"""  # noqa: E501

        self._url_type = None
        self._url = None
        self._resolved_ip_address = None
        self._browser_used = None
        self._attempts = None
        self.discriminator = None

        if url_type is not None:
            self.url_type = url_type
        if url is not None:
            self.url = url
        if resolved_ip_address is not None:
            self.resolved_ip_address = resolved_ip_address
        if browser_used is not None:
            self.browser_used = browser_used
        if attempts is not None:
            self.attempts = attempts

    @property
    def url_type(self):
        """Gets the url_type of this ConnectionVerificationData.  # noqa: E501

        The context of the URL. Currently, Veracode only verifies the target URL, therefore the only value is TARGET_URL.  # noqa: E501

        :return: The url_type of this ConnectionVerificationData.  # noqa: E501
        :rtype: str
        """
        return self._url_type

    @url_type.setter
    def url_type(self, url_type):
        """Sets the url_type of this ConnectionVerificationData.

        The context of the URL. Currently, Veracode only verifies the target URL, therefore the only value is TARGET_URL.  # noqa: E501

        :param url_type: The url_type of this ConnectionVerificationData.  # noqa: E501
        :type: str
        """

        self._url_type = url_type

    @property
    def url(self):
        """Gets the url of this ConnectionVerificationData.  # noqa: E501

        The URL being verified.  # noqa: E501

        :return: The url of this ConnectionVerificationData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConnectionVerificationData.

        The URL being verified.  # noqa: E501

        :param url: The url of this ConnectionVerificationData.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def resolved_ip_address(self):
        """Gets the resolved_ip_address of this ConnectionVerificationData.  # noqa: E501

        IP address for the URL as resolved by the dynamic scanner.  # noqa: E501

        :return: The resolved_ip_address of this ConnectionVerificationData.  # noqa: E501
        :rtype: str
        """
        return self._resolved_ip_address

    @resolved_ip_address.setter
    def resolved_ip_address(self, resolved_ip_address):
        """Sets the resolved_ip_address of this ConnectionVerificationData.

        IP address for the URL as resolved by the dynamic scanner.  # noqa: E501

        :param resolved_ip_address: The resolved_ip_address of this ConnectionVerificationData.  # noqa: E501
        :type: str
        """

        self._resolved_ip_address = resolved_ip_address

    @property
    def browser_used(self):
        """Gets the browser_used of this ConnectionVerificationData.  # noqa: E501

        If true, a browser was used to verify the existence and accessibility of the URL. If false, the URL was accessed directly from the scanner.   # noqa: E501

        :return: The browser_used of this ConnectionVerificationData.  # noqa: E501
        :rtype: bool
        """
        return self._browser_used

    @browser_used.setter
    def browser_used(self, browser_used):
        """Sets the browser_used of this ConnectionVerificationData.

        If true, a browser was used to verify the existence and accessibility of the URL. If false, the URL was accessed directly from the scanner.   # noqa: E501

        :param browser_used: The browser_used of this ConnectionVerificationData.  # noqa: E501
        :type: bool
        """

        self._browser_used = browser_used

    @property
    def attempts(self):
        """Gets the attempts of this ConnectionVerificationData.  # noqa: E501

        Details on each attempt made to verify. For a direct request sent by scanner this will likely have only one entry. if the request is made from a browser it will capture all requests made to load the page.   # noqa: E501

        :return: The attempts of this ConnectionVerificationData.  # noqa: E501
        :rtype: list[ConnectionAttemptData]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this ConnectionVerificationData.

        Details on each attempt made to verify. For a direct request sent by scanner this will likely have only one entry. if the request is made from a browser it will capture all requests made to load the page.   # noqa: E501

        :param attempts: The attempts of this ConnectionVerificationData.  # noqa: E501
        :type: list[ConnectionAttemptData]
        """

        self._attempts = attempts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectionVerificationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionVerificationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
