# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScriptFailureData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_id': 'str',
        'failed_commands': 'list[SeleniumCommandFailureData]'
    }

    attribute_map = {
        'script_id': 'script_id',
        'failed_commands': 'failed_commands'
    }

    def __init__(self, script_id=None, failed_commands=None):  # noqa: E501
        """ScriptFailureData - a model defined in Swagger"""  # noqa: E501

        self._script_id = None
        self._failed_commands = None
        self.discriminator = None

        if script_id is not None:
            self.script_id = script_id
        if failed_commands is not None:
            self.failed_commands = failed_commands

    @property
    def script_id(self):
        """Gets the script_id of this ScriptFailureData.  # noqa: E501

        Identitifer of the script that failed.  # noqa: E501

        :return: The script_id of this ScriptFailureData.  # noqa: E501
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this ScriptFailureData.

        Identitifer of the script that failed.  # noqa: E501

        :param script_id: The script_id of this ScriptFailureData.  # noqa: E501
        :type: str
        """

        self._script_id = script_id

    @property
    def failed_commands(self):
        """Gets the failed_commands of this ScriptFailureData.  # noqa: E501

        Listing of all failed commands. Usually contains only one - the first one where error was encountered.   # noqa: E501

        :return: The failed_commands of this ScriptFailureData.  # noqa: E501
        :rtype: list[SeleniumCommandFailureData]
        """
        return self._failed_commands

    @failed_commands.setter
    def failed_commands(self, failed_commands):
        """Sets the failed_commands of this ScriptFailureData.

        Listing of all failed commands. Usually contains only one - the first one where error was encountered.   # noqa: E501

        :param failed_commands: The failed_commands of this ScriptFailureData.  # noqa: E501
        :type: list[SeleniumCommandFailureData]
        """

        self._failed_commands = failed_commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptFailureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptFailureData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
