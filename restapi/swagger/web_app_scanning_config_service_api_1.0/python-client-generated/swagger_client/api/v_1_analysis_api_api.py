# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1AnalysisApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_scans_to_analysis_using_post(self, analysis_id, scans, **kwargs):  # noqa: E501
        """Adds one or more new URLs to the Dynamic Analysis. You can also add URLs by updating the analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_scans_to_analysis_using_post(analysis_id, scans, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Dynamic Analysis identifier. (required)
        :param list[ScanRequest] scans: scans (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_scans_to_analysis_using_post_with_http_info(analysis_id, scans, **kwargs)  # noqa: E501
        else:
            (data) = self.add_scans_to_analysis_using_post_with_http_info(analysis_id, scans, **kwargs)  # noqa: E501
            return data

    def add_scans_to_analysis_using_post_with_http_info(self, analysis_id, scans, **kwargs):  # noqa: E501
        """Adds one or more new URLs to the Dynamic Analysis. You can also add URLs by updating the analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_scans_to_analysis_using_post_with_http_info(analysis_id, scans, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Dynamic Analysis identifier. (required)
        :param list[ScanRequest] scans: scans (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'scans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_scans_to_analysis_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `add_scans_to_analysis_using_post`")  # noqa: E501
        # verify the required parameter 'scans' is set
        if ('scans' not in params or
                params['scans'] is None):
            raise ValueError("Missing the required parameter `scans` when calling `add_scans_to_analysis_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scans' in params:
            body_params = params['scans']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}/scans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_analysis_using_post(self, analysis, **kwargs):  # noqa: E501
        """Creates a new Dynamic Analysis for the account, if the user has access to the account. Returns the URL of the  new analysis in the HTTP response header.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_analysis_using_post(analysis, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalysisRequest analysis: Details of the Dynamic Analysis request. (required)
        :param bool run_verification: If true, then the Dynamic Analysis is created and a verification scan starts immediately.
        :param bool validate_only: If true, the request is only validated and run_verification is ignored.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_analysis_using_post_with_http_info(analysis, **kwargs)  # noqa: E501
        else:
            (data) = self.create_analysis_using_post_with_http_info(analysis, **kwargs)  # noqa: E501
            return data

    def create_analysis_using_post_with_http_info(self, analysis, **kwargs):  # noqa: E501
        """Creates a new Dynamic Analysis for the account, if the user has access to the account. Returns the URL of the  new analysis in the HTTP response header.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_analysis_using_post_with_http_info(analysis, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalysisRequest analysis: Details of the Dynamic Analysis request. (required)
        :param bool run_verification: If true, then the Dynamic Analysis is created and a verification scan starts immediately.
        :param bool validate_only: If true, the request is only validated and run_verification is ignored.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis', 'run_verification', 'validate_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_analysis_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis' is set
        if ('analysis' not in params or
                params['analysis'] is None):
            raise ValueError("Missing the required parameter `analysis` when calling `create_analysis_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'run_verification' in params:
            query_params.append(('run_verification', params['run_verification']))  # noqa: E501
        if 'validate_only' in params:
            query_params.append(('validate_only', params['validate_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis' in params:
            body_params = params['analysis']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analysis_using_delete(self, analysis_id, **kwargs):  # noqa: E501
        """Deletes the Dynamic Analysis for the provided identifier. You can only hard-delete an analysis if it has never run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_analysis_using_delete(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_analysis_using_delete_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_analysis_using_delete_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def delete_analysis_using_delete_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Deletes the Dynamic Analysis for the provided identifier. You can only hard-delete an analysis if it has never run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_analysis_using_delete_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analysis_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `delete_analysis_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_scan_using_delete(self, scan_id, **kwargs):  # noqa: E501
        """Deletes the URL scan with the specified dentifier. You can only delete scans that have never run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scan_using_delete(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_scan_using_delete_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scan_using_delete_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def delete_scan_using_delete_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Deletes the URL scan with the specified dentifier. You can only delete scans that have never run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scan_using_delete_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scan_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `delete_scan_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_all_scans_for_analysis_using_get(self, analysis_id, **kwargs):  # noqa: E501
        """Returns a list of all occurrences of the Dynamic Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_scans_for_analysis_using_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Dynamic Analysis identifier. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :return: PagedDetailedScan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_all_scans_for_analysis_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_all_scans_for_analysis_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def find_all_scans_for_analysis_using_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Returns a list of all occurrences of the Dynamic Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_scans_for_analysis_using_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Dynamic Analysis identifier. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :return: PagedDetailedScan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all_scans_for_analysis_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `find_all_scans_for_analysis_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}/scans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedDetailedScan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_analysis_audits_by_id_using_get(self, analysis_id, **kwargs):  # noqa: E501
        """Returns a list of audit logs for the specified Dynamic Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_audits_by_id_using_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). The default sort order is ascending. The supported sort criteria are event_type and audited_on.
        :return: PagedAuditData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_analysis_audits_by_id_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_analysis_audits_by_id_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def find_analysis_audits_by_id_using_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Returns a list of audit logs for the specified Dynamic Analysis.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_audits_by_id_using_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). The default sort order is ascending. The supported sort criteria are event_type and audited_on.
        :return: PagedAuditData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_analysis_audits_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `find_analysis_audits_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}/audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedAuditData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_analysis_by_id_using_get(self, analysis_id, **kwargs):  # noqa: E501
        """Returns the Dynamic Analysis for the provided identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_by_id_using_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_analysis_by_id_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_analysis_by_id_using_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def find_analysis_by_id_using_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Returns the Dynamic Analysis for the provided identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_by_id_using_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_analysis_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `find_analysis_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_analysis_summaries_using_get(self, **kwargs):  # noqa: E501
        """Returns a list of Dynamic Analyses for the current organization or a specified, alternate organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_summaries_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). The default sort order is ascending. The following sort criteria are supported: name, status, number_of_scans, latest_occurrence_date_time. 
        :param str name: Filter by the Dynamic Analysis name.
        :param list[str] status: Filter by the Dynamic Analysis status.
        :return: PagedAnalysisSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_analysis_summaries_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_analysis_summaries_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_analysis_summaries_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of Dynamic Analyses for the current organization or a specified, alternate organization.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_summaries_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Sorting criteria in the format: property(,asc|desc). The default sort order is ascending. The following sort criteria are supported: name, status, number_of_scans, latest_occurrence_date_time. 
        :param str name: Filter by the Dynamic Analysis name.
        :param list[str] status: Filter by the Dynamic Analysis status.
        :return: PagedAnalysisSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'sort', 'name', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_analysis_summaries_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedAnalysisSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_platform_applications_using_get(self, **kwargs):  # noqa: E501
        """Returns a list of applications in the Veracode Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_platform_applications_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param str sort: Use this parameter to sort the results in the format: property(,asc|desc). The default sort order is ascending. The following sort criteria are supported: name, id
        :param str application_name: Application name-based search parameter.
        :return: PagedPlatformApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_platform_applications_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_platform_applications_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_platform_applications_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of applications in the Veracode Platform.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_platform_applications_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param str sort: Use this parameter to sort the results in the format: property(,asc|desc). The default sort order is ascending. The following sort criteria are supported: name, id
        :param str application_name: Application name-based search parameter.
        :return: PagedPlatformApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'sort', 'application_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_platform_applications_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'application_name' in params:
            query_params.append(('application_name', params['application_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/platform_applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedPlatformApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_scan_audits_by_id_using_get(self, scan_id, **kwargs):  # noqa: E501
        """Returns a list of audits (activity logs) for the provided URL scan identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_audits_by_id_using_get(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Use sort criteria in the format: property(,asc|desc). The default sort order is ascending. Supported sort  criteria are event_type and audited_on. 
        :return: PagedAuditData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_scan_audits_by_id_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_scan_audits_by_id_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def find_scan_audits_by_id_using_get_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Returns a list of audits (activity logs) for the provided URL scan identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_audits_by_id_using_get_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: Use sort criteria in the format: property(,asc|desc). The default sort order is ascending. Supported sort  criteria are event_type and audited_on. 
        :return: PagedAuditData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_scan_audits_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `find_scan_audits_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}/audits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedAuditData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_scan_by_id_using_get(self, scan_id, **kwargs):  # noqa: E501
        """Returns a URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_by_id_using_get(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :return: DetailedScan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_scan_by_id_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_scan_by_id_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def find_scan_by_id_using_get_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Returns a URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_by_id_using_get_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :return: DetailedScan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_scan_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `find_scan_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetailedScan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scan_configuration_using_get(self, scan_id, **kwargs):  # noqa: E501
        """Returns the configuration for the specified URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_configuration_using_get(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param bool runtime: If true, this call returns the configuration that applies to the specified URL scan as well as the Dynamic  Analysis configuration and the system defaults. 
        :return: ScanConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scan_configuration_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scan_configuration_using_get_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def get_scan_configuration_using_get_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Returns the configuration for the specified URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_configuration_using_get_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param bool runtime: If true, this call returns the configuration that applies to the specified URL scan as well as the Dynamic  Analysis configuration and the system defaults. 
        :return: ScanConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scan_configuration_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_scan_configuration_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'runtime' in params:
            query_params.append(('runtime', params['runtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_analysis_using_put(self, analysis_id, **kwargs):  # noqa: E501
        """Updates a Dynamic Analysis for the provided identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis_using_put(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :param AnalysisRequest analysis: Details of the Dynamic Analysis.
        :param bool run_verification: If true, then Veracode updates the Dynamic Analysis and starts a verification scan immediately if no other  occurrences of the Dynamic Analysis are in progress. 
        :param str method: If set to PATCH, Veracode replaces the content, except for the list of URLs in the Dynamic Analysis.  The list of URLs are partially updated based on the action_type attribute for each individual analysis  update request.' 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_analysis_using_put_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_analysis_using_put_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def update_analysis_using_put_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Updates a Dynamic Analysis for the provided identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis_using_put_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: Identifier of the Dynamic Analysis. (required)
        :param AnalysisRequest analysis: Details of the Dynamic Analysis.
        :param bool run_verification: If true, then Veracode updates the Dynamic Analysis and starts a verification scan immediately if no other  occurrences of the Dynamic Analysis are in progress. 
        :param str method: If set to PATCH, Veracode replaces the content, except for the list of URLs in the Dynamic Analysis.  The list of URLs are partially updated based on the action_type attribute for each individual analysis  update request.' 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'analysis', 'run_verification', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_analysis_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `update_analysis_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'run_verification' in params:
            query_params.append(('run_verification', params['run_verification']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analysis' in params:
            body_params = params['analysis']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_scan_configuration_using_put(self, scan_id, **kwargs):  # noqa: E501
        """Updates the configuration for the specified URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scan_configuration_using_put(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param ScanConfigurationRequest configuration: URL scan configuration.
        :param str method: When set to PATCH, the configuration content is partially updated.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_scan_configuration_using_put_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scan_configuration_using_put_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def update_scan_configuration_using_put_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Updates the configuration for the specified URL scan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scan_configuration_using_put_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param ScanConfigurationRequest configuration: URL scan configuration.
        :param str method: When set to PATCH, the configuration content is partially updated.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'configuration', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scan_configuration_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `update_scan_configuration_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configuration' in params:
            body_params = params['configuration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}/configuration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_scan_using_put(self, scan_id, **kwargs):  # noqa: E501
        """Updates the URL scan request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scan_using_put(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param ScanRequest scan: The URL scan data.
        :param str scanner_version: Version of scan engine.
        :param str method: If set to PATCH, this call partially replaces the content. The update does not affect the list of scans in the  Dynamic Analysis request. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_scan_using_put_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scan_using_put_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def update_scan_using_put_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Updates the URL scan request.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scan_using_put_with_http_info(scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_id: Identifier of the URL scan. (required)
        :param ScanRequest scan: The URL scan data.
        :param str scanner_version: Version of scan engine.
        :param str method: If set to PATCH, this call partially replaces the content. The update does not affect the list of scans in the  Dynamic Analysis request. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'scan', 'scanner_version', 'method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scan_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `update_scan_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'scanner_version' in params:
            query_params.append(('scanner_version', params['scanner_version']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scan' in params:
            body_params = params['scan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
