# coding: utf-8

"""
    Veracode Web Application Scanning Configuration Service API

    Web Application Scanning Configuration API Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: veracode@veracode.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1OccurrenceApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_analysis_occurrence_by_analysis_occurrence_id_using_get(self, analysis_occurrence_id, **kwargs):  # noqa: E501
        """Returns the Dynamic Analysis occurrence for the specified identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_occurrence_by_analysis_occurrence_id_using_get(analysis_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the Dynamic Analysis occurrence. (required)
        :return: AnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_analysis_occurrence_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_analysis_occurrence_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, **kwargs)  # noqa: E501
            return data

    def find_analysis_occurrence_by_analysis_occurrence_id_using_get_with_http_info(self, analysis_occurrence_id, **kwargs):  # noqa: E501
        """Returns the Dynamic Analysis occurrence for the specified identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_occurrence_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the Dynamic Analysis occurrence. (required)
        :return: AnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_analysis_occurrence_by_analysis_occurrence_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_occurrence_id' is set
        if ('analysis_occurrence_id' not in params or
                params['analysis_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `analysis_occurrence_id` when calling `find_analysis_occurrence_by_analysis_occurrence_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_occurrence_id' in params:
            path_params['analysis_occurrence_id'] = params['analysis_occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analysis_occurrences/{analysis_occurrence_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_analysis_occurrences_by_analysis_id_using_get(self, **kwargs):  # noqa: E501
        """Returns a list of occurrences of the Dynamic Analysis. By default, Veracode only returns the occurrences that  started earlier than todays date. Optionally, you can use the status parameter to only return a list of  occurrences of the provided Dynamic Analysis identifier with the specified status(es).   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_occurrences_by_analysis_id_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_verification: Set the parameter to true if you want the results to include the verification details of the returned occurrences.
        :param str analysis_id: Dynamic Analysis identifier.
        :param list[str] status: The status of the Dynamic Analysis occurrences.
        :param str start_date_after: The date from when you want the date range to start. The date should be ISO-8601 format or specify the exact  duration, such as: 2h (2 hours ago) 2d (2 days ago) or 2m (2 minutes ago). 
        :param str start_date_before: The date when you want the date range to finish. The date should be ISO-8601 format or specify the exact duration,  such as: 2h (2 hours in the future) -2d (2 days in the future) or 2m (2 minutes in the future). 
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page. 
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :return: PagedAnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_analysis_occurrences_by_analysis_id_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_analysis_occurrences_by_analysis_id_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_analysis_occurrences_by_analysis_id_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of occurrences of the Dynamic Analysis. By default, Veracode only returns the occurrences that  started earlier than todays date. Optionally, you can use the status parameter to only return a list of  occurrences of the provided Dynamic Analysis identifier with the specified status(es).   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_analysis_occurrences_by_analysis_id_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_verification: Set the parameter to true if you want the results to include the verification details of the returned occurrences.
        :param str analysis_id: Dynamic Analysis identifier.
        :param list[str] status: The status of the Dynamic Analysis occurrences.
        :param str start_date_after: The date from when you want the date range to start. The date should be ISO-8601 format or specify the exact  duration, such as: 2h (2 hours ago) 2d (2 days ago) or 2m (2 minutes ago). 
        :param str start_date_before: The date when you want the date range to finish. The date should be ISO-8601 format or specify the exact duration,  such as: 2h (2 hours in the future) -2d (2 days in the future) or 2m (2 minutes in the future). 
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page. 
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :return: PagedAnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_verification', 'analysis_id', 'status', 'start_date_after', 'start_date_before', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_analysis_occurrences_by_analysis_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_verification' in params:
            query_params.append(('include_verification', params['include_verification']))  # noqa: E501
        if 'analysis_id' in params:
            query_params.append(('analysis_id', params['analysis_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501
        if 'start_date_after' in params:
            query_params.append(('start_date_after', params['start_date_after']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analysis_occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedAnalysisOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_scan_occurence_by_occurrence_id_using_get(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the URL scan occurrence for the provided URL scan occurrence identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_occurence_by_occurrence_id_using_get(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: DetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_scan_occurence_by_occurrence_id_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_scan_occurence_by_occurrence_id_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
            return data

    def find_scan_occurence_by_occurrence_id_using_get_with_http_info(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the URL scan occurrence for the provided URL scan occurrence identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_occurence_by_occurrence_id_using_get_with_http_info(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: DetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_scan_occurence_by_occurrence_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_occurrence_id' is set
        if ('scan_occurrence_id' not in params or
                params['scan_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `scan_occurrence_id` when calling `find_scan_occurence_by_occurrence_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_occurrence_id' in params:
            path_params['scan_occurrence_id'] = params['scan_occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scan_occurrences/{scan_occurrence_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetailedScanOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_scan_occurrences_by_analysis_occurrence_id_using_get(self, analysis_occurrence_id, **kwargs):  # noqa: E501
        """Returns a list of completed URL scan occurrences for the specified Dynamic Analysis occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_occurrences_by_analysis_occurrence_id_using_get(analysis_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the Dynamic Analysis occurrence. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: The sort criteria you want to use in the format: property(,asc|desc). The default sort order is ascending.  The following sort criteria are supported: linked_platform_app_name, status, scheduled_date, start_date,  total_flaw_count, count_of_failed_verifications, count_of_very_high_sev_flaws, count_of_high_sev_flaws,  count_of_medium_sev_flaws, count_of_low_sev_flaws. 
        :param str url: Filter the results by the specified URL.
        :param list[str] linked_platform_app_name: Filter by the application linked to the Dynamic Analysis.
        :param bool scan_locked: Filter by URL scan locked status. A URL scan is locked when Veracode is reviewing it.
        :return: PagedDetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_scan_occurrences_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_scan_occurrences_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, **kwargs)  # noqa: E501
            return data

    def find_scan_occurrences_by_analysis_occurrence_id_using_get_with_http_info(self, analysis_occurrence_id, **kwargs):  # noqa: E501
        """Returns a list of completed URL scan occurrences for the specified Dynamic Analysis occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_scan_occurrences_by_analysis_occurrence_id_using_get_with_http_info(analysis_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the Dynamic Analysis occurrence. (required)
        :param int page: The number of the results page you want to retrieve (0..N), where the default is 0 if you do not specify a page.
        :param int size: The number of records you want to display per page. The maximum is 100 and the default is 20.
        :param list[str] sort: The sort criteria you want to use in the format: property(,asc|desc). The default sort order is ascending.  The following sort criteria are supported: linked_platform_app_name, status, scheduled_date, start_date,  total_flaw_count, count_of_failed_verifications, count_of_very_high_sev_flaws, count_of_high_sev_flaws,  count_of_medium_sev_flaws, count_of_low_sev_flaws. 
        :param str url: Filter the results by the specified URL.
        :param list[str] linked_platform_app_name: Filter by the application linked to the Dynamic Analysis.
        :param bool scan_locked: Filter by URL scan locked status. A URL scan is locked when Veracode is reviewing it.
        :return: PagedDetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_occurrence_id', 'page', 'size', 'sort', 'url', 'linked_platform_app_name', 'scan_locked']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_scan_occurrences_by_analysis_occurrence_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_occurrence_id' is set
        if ('analysis_occurrence_id' not in params or
                params['analysis_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `analysis_occurrence_id` when calling `find_scan_occurrences_by_analysis_occurrence_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_occurrence_id' in params:
            path_params['analysis_occurrence_id'] = params['analysis_occurrence_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'linked_platform_app_name' in params:
            query_params.append(('linked_platform_app_name', params['linked_platform_app_name']))  # noqa: E501
            collection_formats['linked_platform_app_name'] = 'multi'  # noqa: E501
        if 'scan_locked' in params:
            query_params.append(('scan_locked', params['scan_locked']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analysis_occurrences/{analysis_occurrence_id}/scan_occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedDetailedScanOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_verification_report_using_get(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the Verification Report, which contains connection and authentication details for the specified scan occurrence ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_verification_report_using_get(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: VerificationReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_verification_report_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_verification_report_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
            return data

    def find_verification_report_using_get_with_http_info(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the Verification Report, which contains connection and authentication details for the specified scan occurrence ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_verification_report_using_get_with_http_info(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: VerificationReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_verification_report_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_occurrence_id' is set
        if ('scan_occurrence_id' not in params or
                params['scan_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `scan_occurrence_id` when calling `find_verification_report_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_occurrence_id' in params:
            path_params['scan_occurrence_id'] = params['scan_occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scan_occurrences/{scan_occurrence_id}/verification_report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerificationReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_runtime_scan_configuration_using_get(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the configuration for the specified URL scan occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_runtime_scan_configuration_using_get(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: ScanConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_runtime_scan_configuration_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_runtime_scan_configuration_using_get_with_http_info(scan_occurrence_id, **kwargs)  # noqa: E501
            return data

    def get_runtime_scan_configuration_using_get_with_http_info(self, scan_occurrence_id, **kwargs):  # noqa: E501
        """Returns the configuration for the specified URL scan occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_runtime_scan_configuration_using_get_with_http_info(scan_occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :return: ScanConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_runtime_scan_configuration_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_occurrence_id' is set
        if ('scan_occurrence_id' not in params or
                params['scan_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `scan_occurrence_id` when calling `get_runtime_scan_configuration_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_occurrence_id' in params:
            path_params['scan_occurrence_id'] = params['scan_occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scan_occurrences/{scan_occurrence_id}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_analysis_occurrence_action_using_put(self, analysis_occurrence_id, action, **kwargs):  # noqa: E501
        """Performs the specified action on the specified occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_analysis_occurrence_action_using_put(analysis_occurrence_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the occurrence. (required)
        :param str action: Action to perform. (required)
        :return: AnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_analysis_occurrence_action_using_put_with_http_info(analysis_occurrence_id, action, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_analysis_occurrence_action_using_put_with_http_info(analysis_occurrence_id, action, **kwargs)  # noqa: E501
            return data

    def perform_analysis_occurrence_action_using_put_with_http_info(self, analysis_occurrence_id, action, **kwargs):  # noqa: E501
        """Performs the specified action on the specified occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_analysis_occurrence_action_using_put_with_http_info(analysis_occurrence_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_occurrence_id: Identifier of the occurrence. (required)
        :param str action: Action to perform. (required)
        :return: AnalysisOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_occurrence_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_analysis_occurrence_action_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_occurrence_id' is set
        if ('analysis_occurrence_id' not in params or
                params['analysis_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `analysis_occurrence_id` when calling `perform_analysis_occurrence_action_using_put`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `perform_analysis_occurrence_action_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_occurrence_id' in params:
            path_params['analysis_occurrence_id'] = params['analysis_occurrence_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analysis_occurrences/{analysis_occurrence_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_scan_occurrence_action_using_put(self, scan_occurrence_id, action, **kwargs):  # noqa: E501
        """Performs the specified action on the URL scan occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_scan_occurrence_action_using_put(scan_occurrence_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :param str action: Action to be performed. (required)
        :return: DetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_scan_occurrence_action_using_put_with_http_info(scan_occurrence_id, action, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_scan_occurrence_action_using_put_with_http_info(scan_occurrence_id, action, **kwargs)  # noqa: E501
            return data

    def perform_scan_occurrence_action_using_put_with_http_info(self, scan_occurrence_id, action, **kwargs):  # noqa: E501
        """Performs the specified action on the URL scan occurrence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_scan_occurrence_action_using_put_with_http_info(scan_occurrence_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scan_occurrence_id: Identifier of the URL scan occurrence. (required)
        :param str action: Action to be performed. (required)
        :return: DetailedScanOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_occurrence_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_scan_occurrence_action_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_occurrence_id' is set
        if ('scan_occurrence_id' not in params or
                params['scan_occurrence_id'] is None):
            raise ValueError("Missing the required parameter `scan_occurrence_id` when calling `perform_scan_occurrence_action_using_put`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `perform_scan_occurrence_action_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_occurrence_id' in params:
            path_params['scan_occurrence_id'] = params['scan_occurrence_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/scan_occurrences/{scan_occurrence_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetailedScanOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
